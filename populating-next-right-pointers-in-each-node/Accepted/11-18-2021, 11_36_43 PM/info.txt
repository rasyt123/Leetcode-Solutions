{"id":589484689,"lang":"cpp","time":"2 months, 3 weeks","timestamp":1637307403,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/589484689/","is_pending":"Not Pending","title":"Populating Next Right Pointers in Each Node","memory":"17.9 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n    Node* next;\n\n    Node() : val(0), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val, Node* _left, Node* _right, Node* _next)\n        : val(_val), left(_left), right(_right), next(_next) {}\n};\n*/\n\nclass Solution {\npublic:\n    Node* connect(Node* root) {\n        /*\n        Use level order traversal\n        on each level, store a vector nodes.\n        iterate through this vector:\n            set the next value of the ith node to be the ith + 1 \n            set the last next node value in the vector to be null \n        we return the root\n        */\n        if (root == nullptr) {\n            return nullptr;\n        }\n        queue<Node*> q1;\n        q1.push(root);\n        while (!q1.empty()) {\n            int size = q1.size();\n            vector<Node*> currlevel;\n            for (int i = 0; i < size; i++) {\n                Node* curr = q1.front();\n                currlevel.push_back(curr);\n                q1.pop();\n                if (curr->left != nullptr) {\n                    q1.push(curr->left);\n                }\n                if (curr->right != nullptr) {\n                    q1.push(curr->right);\n                }\n            }\n            for (int i = 0; i < currlevel.size() - 1; i++) {\n                currlevel[i]->next = currlevel[i + 1];\n            }\n            currlevel[currlevel.size() - 1]->next = nullptr;\n            currlevel = {};\n        }\n        return root;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"populating-next-right-pointers-in-each-node"}