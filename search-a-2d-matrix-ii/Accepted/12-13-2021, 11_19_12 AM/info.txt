{"id":601364512,"lang":"cpp","time":"1 month, 4 weeks","timestamp":1639423152,"status_display":"Accepted","runtime":"276 ms","url":"/submissions/detail/601364512/","is_pending":"Not Pending","title":"Search a 2D Matrix II","memory":"14.8 MB","code":"class Solution {\npublic:\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\n        /*\n        \n        \n        keep moving right checking if the element to the right of it \n        is greater than target\n                if it is the target\n                    return true\n                otherwise greater than the target\n                    break \n                move down \n                \n        keep moving down checking if the element that's right below it \n        is greater than the target\n                if itis the target\n                    return true\n                otherwise greater than the target\n                    break\n                move to the right \n                \n                \n        new method \n        we can check if the \n    \n        \n        */\n\n        int colstop = matrix[0].size();\n        int rowstop = matrix.size();\n        for (int c = 0; c < colstop; c++) {\n            if (target >= matrix[0][c] and target <= matrix[0][colstop - 1]) {\n                int left = 0;\n                int right = colstop - 1;\n                while(left <= right){\n                    int mid = left + (right - left) / 2;\n                    if (matrix[0][mid] == target) { \n                        return true; \n                    }\n                    else if(matrix[0][mid] < target) {\n                        left = mid + 1; \n                    }\n                    else { \n                        right = mid - 1; \n                    }\n                }\n            }\n            if (target >= matrix[0][c] and target <= matrix[rowstop - 1][c]) {\n                int left = 0;\n                int right = rowstop - 1;\n                while(left <= right){\n                    int mid = left + (right - left) / 2;\n                    if (matrix[mid][c] == target) { \n                        return true; \n                    }\n                    else if(matrix[mid][c] < target) {\n                        left = mid + 1; \n                    }\n                    else { \n                        right = mid - 1; \n                    }\n                }\n                \n            }\n        }\n        return false;\n\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-a-2d-matrix-ii"}