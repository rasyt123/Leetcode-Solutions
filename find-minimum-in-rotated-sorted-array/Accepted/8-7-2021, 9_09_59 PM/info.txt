{"id":535051091,"lang":"cpp","time":"6 months, 1 week","timestamp":1628395799,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/535051091/","is_pending":"Not Pending","title":"Find Minimum in Rotated Sorted Array","memory":"10.1 MB","code":"class Solution {\npublic:\n    int findMin(vector<int>& nums) {\n        int mid;\n        int low;\n        int high;\n        int minimum;\n        if(nums.size() == 1) {\n            return nums[0];\n        } else if(nums.size() == 2) {\n            if (nums[0] > nums[1]) {\n                minimum = nums[1];\n            } else {\n                minimum = nums[0];\n            }\n            return minimum;\n        }\n        low = 0;\n        high = nums.size() - 1;\n        minimum = nums[0];\n         while (low <= high) {\n            mid = low + (high - low) / 2;\n            if (nums[high] < minimum) {\n                minimum = nums[high];\n            }\n            if (nums[low] < minimum) {\n                minimum = nums[low];\n            }\n            if (nums[mid] < minimum) {\n                minimum = nums[mid];\n            }\n\n\n            if (nums[low] > nums[high] and nums[mid] < nums[high] and nums[mid] < nums[mid - 1]) {\n                minimum = nums[mid];\n                return minimum;\n            }\n\n            if (nums[high] > nums[mid]) {\n                 high = mid - 1;\n            }\n            else if (nums[mid] > nums[low]) {\n                 low = mid + 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        \n        return minimum;\n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-minimum-in-rotated-sorted-array"}