{"id":549056085,"lang":"cpp","time":"5 months, 1 week","timestamp":1630703979,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/549056085/","is_pending":"Not Pending","title":"Trim a Binary Search Tree","memory":"17.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* trimBST(TreeNode* root, int low, int high) {\n        /*\n        \n        \n        I need to check if the current node is not between low and high\n        \n        I only want to recurse to nodes that are outside the range\n        \n        If a node is outside the range of high, then every subtree of that node\n        will need to be trimmed. (not necessarily) we will trim the nodes one at a time\n        \n        If a node is outside the range of low as in less than, then every subtree of that node will need to be\n        trimmed. We will trim the nodes one at a time. \n        \n        \n        Make a helper function that will find the minimum node in the left subtree\n        we need to keep deleting until the current node is within the range \n        \n    \n        */\n        if (!root) {\n            return nullptr;\n        }\n        \n        root->left = trimBST(root->left, low, high);\n        root->right = trimBST(root->right, low, high);\n        if (root->val < low) {\n            return root->right;\n        }\n        if (root->val > high) {\n            return root->left;\n        }\n        return root;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"trim-a-binary-search-tree"}