{"id":528358399,"lang":"cpp","time":"6 months, 2 weeks","timestamp":1627266889,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/528358399/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSubtree(TreeNode* root, TreeNode* subRoot) {\n        if (subRoot == nullptr) {\n            return false;\n        }\n        if (root == nullptr) {\n            return false;\n        }\n\n        if (root->val == subRoot->val) {\n            if (subRoot->left != nullptr and subRoot->right != nullptr) {\n                if (root->left->val == subRoot->left->val and root->right->val == subRoot->right->val) {\n                    if (root->left->left == nullptr and root->left->right == nullptr and root->right->left == nullptr and root->right->right == nullptr)\n                            return true;\n                }\n            } else if (subRoot->left != nullptr and subRoot->right == nullptr and root->left->left == nullptr) {\n                if (root->left->val == subRoot->left->val) {\n                    if (root->left->left == nullptr and root->left->right == nullptr) {\n                        return true;\n                    }\n                }\n            } else if (subRoot->right != nullptr and subRoot->left == nullptr and root->right->right == nullptr) {\n                if (root->right->val == subRoot->right->val) {\n                    if (root->right->right == nullptr and root->right->left == nullptr) {\n                        return true;\n                    }\n                }\n            } else {\n                return false;\n            }\n        }\n        return isSubtree(root->left, subRoot) or isSubtree(root->right, subRoot);\n    }\n};","compare_result":"11001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"subtree-of-another-tree"}