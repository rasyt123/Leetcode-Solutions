{"id":540654116,"lang":"cpp","time":"5 months, 3 weeks","timestamp":1629331195,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/540654116/","is_pending":"Not Pending","title":"Sqrt(x)","memory":"N/A","code":"class Solution {\npublic:\n    int mySqrt(int x) {\n        /*\n        Binary Search Problem\n\n        decimal is truncated\n\n\n\n         [1, 2, 3, 4]\n\n         Set l to be 1, Set R to be 4;\n\n         take the middle of the l and r and test if that if the middle is a\n         square of x\n            if it is just return the middle\n\n         if the middle square is bigger than the target\n             we should check the left sorted portion\n         otherwise:\n            we check the right sorted portion\n\n\n\n        has to be between 1 and 8\n        1 + 8 /2 = 4.5\n\n        4.5^2 20.25\n\n        1 + 4.4\n\n        We can keep resizing the input and output to be with errors of 0.1\n        and if the difference between mid * mid is less than or equal to 0.5 we should just\n        return the truncated version of mid\n\n\n\n        1 8\n\n        1 + 8 = 9\n\n        9 / 2 = 4\n\n\n        1 + 4 = 5\n\n        1 2 3 4\n        l m   r\n        2 3 4\n        L M R\n        1 2 3 4 5 6 7 8 9 10\n\n         if the target is between l and m   and the distance between l and m is 1\n            then return l\n        if the target is bettwen m and r and the distance between r and m is one;\n            return mid;\n\n        sqrt(8)\n        = 2.8\n\n\n        1 2 3 4\n\n        */\n        if (x == 0) {\n            return 0;\n        }\n        int l = 1, r = x;\n        int mid;\n        while (l <= r) {\n            mid = l + (r - l) / 2;\n            if (mid * mid == x) {\n                return mid;\n            }\n            if (l * l < x and mid * mid > x and abs(mid - l) == 1) {\n                return l;\n            }\n            if (mid * mid < x and r * r > x and abs(r - mid) == 1) {\n                return mid;\n            } \n            if (mid * mid > x) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return mid;\n    }\n};\n\n","compare_resulttitle_slug":"sqrtx"}