{"id":532559291,"lang":"cpp","time":"6 months, 1 week","timestamp":1627979930,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/532559291/","is_pending":"Not Pending","title":"Delete Node in a BST","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* deleteNode(TreeNode* root, int key) {\n        TreeNode* temp;\n        temp = deletezanode(root, nullptr, key);\n        if (root == nullptr) {\n            return nullptr;\n        }\n        if (root->left == nullptr and root->right == nullptr) {\n            return nullptr;\n        }\n        if (temp != nullptr) {\n            return temp;\n        } else {\n            return root;\n        }\n\n    }\n\n\n    TreeNode* deletezanode(TreeNode* root, TreeNode* parent, int key) {\n\n        if (root == nullptr) {\n            return nullptr;\n        }\n        if (root->val > key) {\n            deletezanode(root->left, root, key);\n        } else if (root->val < key) {\n            deletezanode(root->right, root, key);\n        } else {\n            if (parent == nullptr and root->left and root->right) {\n                root->right->left = root->left;\n                root = root->right;\n                return root;\n            } else if (parent == nullptr and root->left != nullptr) {\n                root = root->left;\n                return root;\n            } else if (parent == nullptr and root->right != nullptr) {\n                root = root->right;\n                return root;\n            }\n            \n            \n\n\n            if (root->val < parent->val and root->left != nullptr and root->right != nullptr) {\n                parent->left = root->right;\n                parent->left->left = root->left;\n\n            } else if (root->val < parent->val) {\n                parent->left = root->left;\n\n            }\n\n            if (root->val > parent->val and root->left != nullptr and root->right != nullptr) {\n                parent->right = root->left;\n                parent->right->right = root->right;\n            } else if (root->val > parent->val) {\n                parent->right = root->right;\n\n            }\n        }\n        return nullptr;\n    }\n};\n\n","compare_result":"1110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"delete-node-in-a-bst"}