{"id":528784801,"lang":"cpp","time":"6 months, 2 weeks","timestamp":1627335987,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/528784801/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"16.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSymmetric(TreeNode* root) {\n        if (root == nullptr) {\n            return false;\n        }\n        if (isMirror(root->left, root->right)) {\n            return true;\n        } else {\n            return false;\n        }\n        //If the value of the root is null\n        //Then I should just return false\n        //if the root\n        // Symmetric(root2, root3);\n        \n        \n        //need to compare left node of left subtree first and then and then the right node\n        //of the right subtree \n        \n        //need to compare right node of left subtree and then the left node of the left subtree\n        \n    }\n    \n    bool isMirror(TreeNode* root1, TreeNode* root2) {\n        if (root1 == nullptr and root2 == nullptr) {\n            return true;\n        }\n        if (root1 == nullptr or root2 == nullptr) {\n            return false;\n        }\n        if (root1->val != root2->val) {\n            return false;\n        }\n        \n        return isMirror(root1->left, root2->right) and isMirror(root1->right, root2->left);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"symmetric-tree"}