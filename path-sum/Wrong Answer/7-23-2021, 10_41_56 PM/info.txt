{"id":527370521,"lang":"cpp","time":"6 months, 3 weeks","timestamp":1627105316,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/527370521/","is_pending":"Not Pending","title":"Path Sum","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasPathSum(TreeNode* root, int targetSum) {\n        bool sumexists = false;\n        bool success;\n        //For this problem, I need to recurse through the left and right subtrees and add the values as I recurse.\n        //if we keep adding and the sum happens to be bigger than the target, we should just return false;\n        //As we recurse through the tree, if the sum happens to be the target, we should return true immediately.\n        helper(root, targetSum, 0, &sumexists);\n        if (targetSum == 0) {\n            return false;\n        }\n        return sumexists;\n    }\n\n    void helper(TreeNode* root, int targetSum, int thesum, bool* foundmatch) {\n        bool match1;\n        if (root != nullptr and root->val == targetSum and (root->left || root->right)) {\n            return;\n        } else if (thesum == targetSum) {\n            *foundmatch = true;\n            return;\n        }\n        if (root == nullptr) {\n            return;\n        }\n        if (root->val + thesum > targetSum) {\n            return;\n        }\n        helper(root->left, targetSum, thesum + root->val, foundmatch);\n        helper(root->right, targetSum, thesum + root->val, foundmatch);\n    }\n};","compare_result":"11111111111111011101110101111011011101001011111011111010111011010101011010001011100111101010110110111100100110010001","title_slug":"path-sum"}