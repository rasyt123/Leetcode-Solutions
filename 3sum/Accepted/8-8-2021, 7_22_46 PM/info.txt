{"id":535524627,"lang":"cpp","time":"6Â months","timestamp":1628475766,"status_display":"Accepted","runtime":"64 ms","url":"/submissions/detail/535524627/","is_pending":"Not Pending","title":"3Sum","memory":"21.1 MB","code":"class Solution {\npublic:\n    vector<vector<int> > threeSum(vector<int> &num) {\n    \n    vector<vector<int> > res;\n\n    std::sort(num.begin(), num.end());\n\n    for (int i = 0; i < num.size(); i++) {\n        \n        int target = -num[i];\n        int front = i + 1;\n        int back = num.size() - 1;\n\n        while (front < back) {\n\n            int sum = num[front] + num[back];\n            \n            // Finding answer which start from number num[i]\n            if (sum < target)\n                front++;\n\n            else if (sum > target)\n                back--;\n\n            else {\n                vector<int> triplet = {num[i], num[front], num[back]};\n                res.push_back(triplet);\n                \n                // Processing duplicates of Number 2\n                // Rolling the front pointer to the next different number forwards\n                while (front < back && num[front] == triplet[1]) front++;\n\n                // Processing duplicates of Number 3\n                // Rolling the back pointer to the next different number backwards\n                while (front < back && num[back] == triplet[2]) back--;\n            }\n            \n        }\n\n        // Processing duplicates of Number 1\n        while (i + 1 < num.size() && num[i + 1] == num[i]) \n            i++;\n\n    }\n    \n    return res;\n    \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"3sum"}