{"id":538158578,"lang":"cpp","time":"6Â months","timestamp":1628906819,"status_display":"Accepted","runtime":"34 ms","url":"/submissions/detail/538158578/","is_pending":"Not Pending","title":"Longest Substring Without Repeating Characters","memory":"8.5 MB","code":"class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        int windowstart = 0, maxlength = 0;\n        map<char, int> charfreq;\n        for (int windowend = 0; windowend < s.size(); windowend++) {\n            char rightchar = s[windowend];\n            if (charfreq.find(rightchar) != charfreq.end()) {\n                ++charfreq[rightchar];\n            } else {\n                charfreq[rightchar] = 1;\n            }\n            \n                while (charfreq[rightchar] > 1) {\n                    char leftchar = s[windowstart];\n                    --charfreq[leftchar];\n                    \n                    ++windowstart;\n                }\n            \n            maxlength = max(maxlength, windowend - windowstart + 1);\n        }\n        return maxlength;\n        \n        \n        /*\n        \n        \n        s = \"abcabcbb\"\n        \n        For this problem, I will have the windowstart and end be at 0 because it is the first index\n        \n        \n        The windowend will keep on growing, so I can add the windowend at s[windowend] into the hashmap because \n        we've included that specific character. \n        \n        if you find the windoend in the hashtable count is greater than 1:\n        \n            while the count of the windowend is greater than 1:\n                we take the windowstart char \n            \n                decrease the frequency of that char  \n                 if the frequency is zero:\n                    remove the item from the hashtable\n                windowstart++ \n        calculate the length of the window string\n        \n        \n        \n        I need to calculate the max length of the string constantly \n            \n            \n        \n        */\n       \n        \n        \n        \n    }\n};","compare_resulttitle_slug":"longest-substring-without-repeating-characters"}