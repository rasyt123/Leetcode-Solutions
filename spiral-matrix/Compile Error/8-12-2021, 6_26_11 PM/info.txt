{"id":537642235,"lang":"cpp","time":"6Â months","timestamp":1628817971,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/537642235/","is_pending":"Not Pending","title":"Spiral Matrix","memory":"N/A","code":"class Solution {\npublic:\n    vector<int> spiralOrder(vector<vector<int>>& matrix) {\n        vector<int> jboy;\n        map<int, int> coords;\n        int currow, currcolumn, currcol;\n        currow = 0;\n        currcol = 0;\n        /*\n\n\n\n        currrow, currcolumn\n       Keep going right\n       If you can't go right anymore (you've found a coordinate u've been to already)\n       break\n\n       Check num elements of vector with number of elements inside of the matrix\n\n       go down\n       if you can't go down anymore\n       go left\n       if you can't go left anymore, go up\n\n\n       loop condition should say that we should keeping spiraling until the number of elements inside of the vector\n       are equal to the ones inside of the matrix\n\n\n        Need to figure out when not to bump an element that you've already visited\n\n\n        */\n        int colsize = matrix.at(0).size();\n        int rowsize = matrix.size();\n        int oldrow;\n        int oldcol;\n        int lowerrowsize = 0;\n        int lowercolsize = 0;\n        bool first = true;\n\n\n\n        while (jboy.size() != matrix.at(0).size() * matrix.size()) {\n            if (first) {\n\n            } else {\n                --colsize;\n            }\n\n            for (currcol ; currcol < colsize - 1; ++currcol) {\n                jboy.push_back(matrix[currow][currcol]);\n            }\n            if(jboy.size() == matrix.at(0).size() * matrix.size()) {\n                break;\n            }\n\n            if (first) {\n\n            } else {\n                --rowsize;\n            }\n\n            for (currow = currow; currow < rowsize - 1; ++currow) {\n                jboy.push_back(matrix[currow][currcol]);\n            }\n\n            if (first) {\n\n            } else {\n                ++lowercolsize;\n            }\n\n            for (currcol = colsize - 1; currcol > lowercolsize; --currcol) {\n                jboy.push_back(matrix[currow][currcol]);\n            }\n\n\n            ++lowerrowsize;\n            for (currow ; currow > lowerrowsize; --currow) {\n                jboy.push_back(matrix[currow][currcol]);\n            }\n            first = false;\n\n\n        }\n\n\n\n        return jboy;\n    }\n};\n\n\nint main() {\n    Solution jboy;\n    vector<vector<int>> nums{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}};\n    vector<int> manbeast;\n    manbeast = jboy.spiralOrder(nums);\n\n\n\n\n\n}","compare_result":null,"title_slug":"spiral-matrix"}