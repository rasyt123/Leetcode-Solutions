{"id":552751776,"lang":"cpp","time":"5Â months","timestamp":1631302866,"status_display":"Accepted","runtime":"58 ms","url":"/submissions/detail/552751776/","is_pending":"Not Pending","title":"Merge Intervals","memory":"18.3 MB","code":"class Solution {\npublic:\n    vector<vector<int>> merge(vector<vector<int>>& intervals) {\n        vector<vector<int>> sortedintervals;\n        vector<vector<int>> answer;\n        vector<int> starts;\n        vector<int> ends;\n        vector<int> extra;\n        stack<vector<int>> intervalmerge;\n\n        for (int i = 0; i < intervals.size(); i++) {\n            starts.push_back(intervals[i][0]);\n            ends.push_back(intervals[i][1]);\n        }\n\n\n        sort(starts.begin(), starts.end());\n        sort(ends.begin(), ends.end());\n        for (int i = 0; i < starts.size(); i++) {\n            sortedintervals.push_back({starts[i], ends[i]});\n        }\n        for (vector<int> item : sortedintervals) {\n            if (!intervalmerge.empty()) {\n                vector<int> result = intervalmerge.top();\n                if (result[1] >= item[0]) {\n                    intervalmerge.pop();\n                    intervalmerge.push({result[0], item[1]});\n                    continue;\n                }\n            }\n            intervalmerge.push(item);\n        }\n        while (!intervalmerge.empty()) {\n            vector<int> topinterval = intervalmerge.top();\n            answer.push_back(topinterval);\n            intervalmerge.pop();\n        }\n        reverse(answer.begin(), answer.end());\n        return answer;   \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-intervals"}