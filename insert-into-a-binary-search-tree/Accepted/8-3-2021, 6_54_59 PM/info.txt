{"id":532935219,"lang":"cpp","time":"6 months, 1 week","timestamp":1628042099,"status_display":"Accepted","runtime":"72 ms","url":"/submissions/detail/532935219/","is_pending":"Not Pending","title":"Insert into a Binary Search Tree","memory":"56.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* insertIntoBST(TreeNode* root, int val) {\n        TreeNode* newnode;\n        /*\n        We need to recurse through both trees depending on the value of the key\n        \n        If root == nullptr:\n            make a new treenode\n            initialize the value with val\n            return this new treenode;\n        \n        \n        if the val is greater than the rootval and the root has two children:\n          root->right = InsertBST(root->right, val);\n        otherwise if the val is less than the rootval and the root has two children:\n          root->left = InsertBST(root->left, val);\n            \n          \n         return root\n        */\n        \n        \n        if (root == nullptr) {\n            newnode = new TreeNode;\n            newnode->val = val;\n            return newnode;\n        }\n        \n        if (val > root->val) {\n            root->right = insertIntoBST(root->right, val);\n        } else if (val < root->val) {\n            root->left = insertIntoBST(root->left, val);\n        }\n        \n    \n        return root;\n        \n        \n        \n    \n    }\n};","compare_result":"11111111111111111111111111111111111","title_slug":"insert-into-a-binary-search-tree"}