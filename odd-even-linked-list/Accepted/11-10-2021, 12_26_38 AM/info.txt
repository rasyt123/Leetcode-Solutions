{"id":584937467,"lang":"cpp","time":"3Â months","timestamp":1636532798,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/584937467/","is_pending":"Not Pending","title":"Odd Even Linked List","memory":"10.6 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* oddEvenList(ListNode* head) {\n        /*\n        We can initailize 2 dummy linked list nodes\n        and merge these at the end\n        and a counter for odd or even\n        when we traverse through the linked list, if the index is even, set the next of\n            if the index is even:\n                dummy1->next = curretnode;\n                dummy1 = dummy1->next\n            otherwise\n                dummy2->next = currentnode;\n                dummy2 = dummy2->next\n        1 3 5\n        dummy1 next = 2\n        2 4\n        return head;\n        */\n\n        int currindex = 1;\n        ListNode* dummy1 = new ListNode;\n        ListNode* curdummy1 = dummy1;\n        ListNode* dummy2 = new ListNode;\n        ListNode* curdummy2 = dummy2;\n\n        ListNode* curr = head;\n\n        while (curr != nullptr) {\n            if (currindex % 2 == 0) {\n                dummy1->next = curr;\n                dummy1 = dummy1->next;\n            } else {\n                dummy2->next = curr;\n                dummy2 = dummy2->next;\n            }\n            currindex += 1;\n            curr = curr->next;\n        }\n        dummy1->next = nullptr;\n        dummy2->next = nullptr;\n        dummy2->next = curdummy1->next;\n        return curdummy2->next;\n\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"odd-even-linked-list"}