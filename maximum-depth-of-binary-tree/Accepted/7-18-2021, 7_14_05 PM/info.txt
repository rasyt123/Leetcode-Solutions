{"id":524720290,"lang":"cpp","time":"6 months, 3 weeks","timestamp":1626660845,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/524720290/","is_pending":"Not Pending","title":"Maximum Depth of Binary Tree","memory":"19.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        vector<int> depthvector;\n        int rootdepth = 1;\n        helper(root, depthvector, 1);\n        if (root == nullptr) {\n            return 0;\n        } else {\n            return *max_element(depthvector.begin(), depthvector.end());\n        }\n    }\n\n    void helper(TreeNode* root, vector<int>& depthvector, int depth) {\n        if (root == nullptr) {\n            return;\n        }\n        if (root->left == nullptr and root->right == nullptr) {\n            depthvector.push_back(depth);\n            return;\n        } else {\n            ++depth;\n        }\n        helper(root->left, depthvector, depth);\n        helper(root->right, depthvector, depth);\n    }\n\n};\n","compare_result":"111111111111111111111111111111111111111","title_slug":"maximum-depth-of-binary-tree"}