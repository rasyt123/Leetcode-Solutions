{"id":575211936,"lang":"cpp","time":"3 months, 3 weeks","timestamp":1634875487,"status_display":"Accepted","runtime":"1837 ms","url":"/submissions/detail/575211936/","is_pending":"Not Pending","title":"Next Greater Node In Linked List","memory":"41.4 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> nextLargerNodes(ListNode* head) {\n        /*\n        create a vector of integers\n        Create a new dummy node.\n        this is probably going to be a O(n^2) solution \n        from a particular node that we start at \n    we iterate through the linked list\n        root == curr;\n        we iterate through the linked list with another node pointer\n            if the value to the right is greater than root \n                we push the index of the \n            increment currindex;\n            \n        */\n        ListNode* curr = head;\n        vector<int> result;\n        while (curr != nullptr) {\n            ListNode* compare = curr;\n            while (compare != nullptr) {\n                if (compare->val > curr->val) {\n                    result.push_back(compare->val);\n                    break;\n                }\n                compare = compare->next;\n            }\n            if (compare == nullptr) {\n                result.push_back(0);\n                \n            }\n            curr = curr->next;\n        }\n        return result;\n        \n        \n        \n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"next-greater-node-in-linked-list"}