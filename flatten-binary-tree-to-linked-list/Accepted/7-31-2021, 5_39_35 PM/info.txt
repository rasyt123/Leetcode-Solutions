{"id":531305441,"lang":"cpp","time":"6 months, 2 weeks","timestamp":1627778375,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/531305441/","is_pending":"Not Pending","title":"Flatten Binary Tree to Linked List","memory":"13 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void flatten(TreeNode* root) {\n        stack<TreeNode*> s1;\n        TreeNode* current;\n\n        if (root == nullptr) {\n            return;\n        }\n        s1.push(root);\n        while (!s1.empty()) {\n            current = s1.top();\n            s1.pop();\n            if (current->right != nullptr) {\n                s1.push(current->right);\n            }\n            if (current->left != nullptr) {\n                s1.push(current->left);\n            }\n            if (s1.empty()) {\n                current->right = nullptr;\n            } else {\n                current->right = s1.top();\n            }\n            current->left = nullptr;\n        }\n    }\n};\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flatten-binary-tree-to-linked-list"}