{"id":522206040,"lang":"cpp","time":"7Â months","timestamp":1626230773,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/522206040/","is_pending":"Not Pending","title":"Binary Tree Postorder Traversal","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> postorderTraversal(TreeNode* root) {\n        stack<TreeNode*> s1;\n        vector<int> bintree;\n        TreeNode* deletion;\n        TreeNode* childleft;\n        TreeNode* childright;\n        TreeNode* moot;\n        bool first = true;\n        \n        if (root == nullptr) {\n            return bintree;\n        }\n        \n        s1.push(root);\n        \n        if (root->right != nullptr and root->left != nullptr) {\n            childleft = root->left;\n            childright =  root->right;\n        }\n        \n        while (!s1.empty()) {\n            root = s1.top();\n            if (root->right == nullptr and root->left == nullptr) {\n                if (childleft != nullptr and childright != nullptr) {\n                    if (first) {\n                        while (s1.top() != childright) {\n                            bintree.push_back(s1.top()->val);\n                            s1.pop();\n                            first = false;\n                        }\n                    } else {\n                         while (!s1.empty()) {\n                            bintree.push_back(s1.top()->val);\n                            s1.pop();\n                        }\n                    }\n                } else {\n                    while (!s1.empty()) {\n                        bintree.push_back(s1.top()->val);\n                        s1.pop();\n                    }\n                }\n            }\n            if (root->right != nullptr) {\n                s1.push(root->right);\n            }\n            if (root->left != nullptr) {\n                s1.push(root->left);\n            }\n        }\n        return bintree;\n    }\n};","compare_result":"11111111111111111111111111111110101111111111111111111111001111111100","title_slug":"binary-tree-postorder-traversal"}