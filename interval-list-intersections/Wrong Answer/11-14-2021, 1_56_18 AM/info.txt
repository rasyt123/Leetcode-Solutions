{"id":586972613,"lang":"cpp","time":"2 months, 4 weeks","timestamp":1636883778,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/586972613/","is_pending":"Not Pending","title":"Interval List Intersections","memory":"N/A","code":"class Solution {\npublic:\n    vector<vector<int>> intervalIntersection(vector<vector<int>>& firstList, vector<vector<int>>& secondList) {\n        /* \n        [0, 2]\n        [1, 5]\n        \n        How to tell when the intervals are intersecting?\n        \n        \n        XXXXXX\n        XXX\n         XXXXX\n        012345 \n        \n     \n        \n        1. \n        merge the intervals \n        increment left pointer until it covers both intervals\n        l pointer must be greater than or equal to all three of the start of the interval\n        we set l to be min start of the two arrays and r to be the max of the two arrays at the end \n        of the interval\n        \n        \n        [0, 5]\n        [0, 2]\n        [1, 5]\n        greater than or equal \n        \n        5 10 \n        8 12\n        \n        \n        \n        \n         0 2 \n         1 5 \n         \n         1 2 \n         \n         \n        \n        \n        */\n        if (firstList.size() == 0 or secondList.size() == 0) {\n            return {};\n        }\n        vector<vector<int>> intervalresult;\n        for (int i = 0; i < firstList.size(); i++) {\n            int l = min(firstList[i][0], secondList[i][0]);\n            int r = max(firstList[i][1], secondList[i][1]);\n            \n\n            while (l <= firstList[i][0] or l <= secondList[i][0]) {\n                ++l;\n            }\n            l -= 1;\n            while (r >= firstList[i][1] or r >= secondList[i][1]) {\n                --r;\n            }\n            r += 1;\n            intervalresult.push_back({l, r});\n            if (i + 1 < firstList.size() and firstList[i][1] == secondList[i + 1][0]) {\n                intervalresult.push_back({firstList[i][1], firstList[i][1]});\n            } else if (i + 1 < firstList.size() and secondList[i][1] == firstList[i + 1][0]) {\n                intervalresult.push_back({secondList[i][1], secondList[i][1]});\n            }\n        }\n        return intervalresult;\n    }\n};","compare_result":"1111111111100000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"interval-list-intersections"}