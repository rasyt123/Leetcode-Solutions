{"id":584952891,"lang":"cpp","time":"3Â months","timestamp":1636535932,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/584952891/","is_pending":"Not Pending","title":"Interval List Intersections","memory":"N/A","code":"class Solution {\npublic:\n    vector<vector<int>> intervalIntersection(vector<vector<int>>& firstList, vector<vector<int>>& secondList) {\n        /* \n        Maintain a list of the intervals here in a vector of vectors \n        return the intersection of the two interval lists \n        \n        \n        What defines an intersection:\n            End of the first list is greater than or equal start of the second \n            \n            or the start of of the first list less than or equal to end of the second \n            \n        Solution 1 Merge Intervals \n            \n         first list    [0, 2]     first list [1, 5]\n         second list   [1, 5]     second list [0, 2]\n            \n        iterate through bot\n       \n        Think of the Two Pointer Solution: \n        \n        l = 0 and r = 0\n        \n        We want l to be the start of the intersection and r to be the end of the intersection\n        of two particular intervals \n        \n        [5, 10]\n        [8, 12]\n    \n        */\n         vector<vector<int>> result;\n        if (firstList.size() == 0 or secondList.size() == 0) {\n            return {};\n        }\n        \n        for (int i = 0; i < firstList.size(); i++) {\n            \n            if (firstList[i][1] >= secondList[i][0]) {\n                vector<int> mergedinterval = {secondList[i][0], firstList[i][1]};\n                result.push_back(mergedinterval);\n            } else if (firstList[i][0] <= secondList[i][1]) {\n                vector<int> mergedinterval = {firstList[i][0], secondList[i][1]};\n                result.push_back(mergedinterval);\n            }\n            \n            \n            if (i + 1 < firstList.size() and secondList[i][1] == firstList[i + 1][0]) {\n                vector<int> mergedinterval = {secondList[i][1], secondList[i][1]};\n                result.push_back(mergedinterval);\n            } else if (i + 1 < firstList.size() and firstList[i][1] == secondList[i + 1][0]) {\n                vector<int> mergedinterval = {firstList[i][1], firstList[i][1]};\n                result.push_back(mergedinterval);\n            }\n        }\n        /*\n        \n        XXXXXX\n        5    10\n    XXXXX     \n    1   5    \n        \n        */\n      \n        return result;\n        \n    }\n};","compare_result":"1111110101000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"interval-list-intersections"}