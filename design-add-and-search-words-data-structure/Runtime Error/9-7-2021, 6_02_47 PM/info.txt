{"id":551211730,"lang":"cpp","time":"5Â months","timestamp":1631062967,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/551211730/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"N/A","code":"class WordDictionary {\npublic:\n    /** Initialize your data structure here. */\n   map<char, WordDictionary*> children;\n    bool endofword;\n\n    WordDictionary() {\n        map<char, WordDictionary*> children;\n        bool endofword = false;\n\n\n    }\n\n    void addWord(string word) {\n        WordDictionary* newnode;\n        WordDictionary* temp;\n        newnode = this;\n        if (children.count(word[0]) == 0) {\n            newnode = new WordDictionary;\n            children[word[0]] = newnode;\n            newnode = this;\n        }\n        for (int i = 0; i < word.size(); i++) {\n            if (newnode->children.count(word[i]) != 0) {\n                newnode = newnode->children[word[i]];\n            } else {\n                temp = new WordDictionary;\n                newnode->children.insert({word[i], temp});\n                newnode = temp;\n            }\n        }\n        temp->endofword = true;\n    }\n\n    bool search(string word) {\n        WordDictionary* newnode;\n        newnode = this;\n        for (int i = 0; i < word.size(); i++) {\n            if (newnode->children.count(word[i]) != 0) {\n                newnode = newnode->children[word[i]];\n            } else if (word[i] == '.') {    \n                 for (pair<char, WordDictionary*> item: newnode->children) {\n                    if (!newnode->children.empty() and item.first != word[i]) {\n                        newnode = newnode->children[item.first];\n                        break;\n                    }\n                }\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * WordDictionary* obj = new WordDictionary();\n * obj->addWord(word);\n * bool param_2 = obj->search(word);\n */","compare_result":"1000000000000","title_slug":"design-add-and-search-words-data-structure"}