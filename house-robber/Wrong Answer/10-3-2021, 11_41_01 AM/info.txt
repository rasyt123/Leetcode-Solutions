{"id":565194837,"lang":"cpp","time":"4 months, 1 week","timestamp":1633286461,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/565194837/","is_pending":"Not Pending","title":"House Robber","memory":"N/A","code":"class Solution {\npublic:\n    int rob(vector<int>& nums) {\n        /*\n        1D dp o(n) space \n        We need to start robbing from the end \n        \n        \n        When at 9 dollars, I can rob the house with 1 only  \n        \n        \n        Subproblems:\n            when we want to take the maximum profit robbing \n            a particular house, we split this into sub problems \n            where we can take the max profit of the houses after the current, and use \n            that to build a solution for the maximum profit of the house we're on \n        \n        Optimal Substructure:\n            The maximum profit that we can make is the\n            current amount of money + 2 houses to the right\n            starting from teh end of the houses\n            \n             Ni + (i + 2)\n            \n            if there is only one house:\n                we can only rob that house \n            if there is no house 2 spaces down, then \n                we can only rob the current house\n            if \n            \n            base cases:\n                the two houses at the end can only rob itself \n                when we move down to an\n                \n            dp[]\n            dp[]\n            \n            \n            [1]\n            [3, 1]\n            \n            [2, 7, 9, 3, 1]\n            [2]\n            [9, 3 , 1]\n            \n            [3, 1]  3\n            [1]  1\n            [9, 3, 1] 9 + 1 = 10\n            [7, 9 , 3 1] \n            \n                    \n                 profit = max(profit,nums[i] + dp[i + 2])\n                 dp[i] = profit;\n        */\n        \n        vector<int> dp(nums.size(), 0);\n        int profit = 0;\n        if (nums.size() == 1) {\n            return nums[0];\n        } else if (nums.size() == 2) {\n            return max(nums[nums.size() - 1], nums[nums.size() - 2]);\n        }\n        dp[nums.size() - 1] = nums[nums.size() - 1];\n        dp[nums.size() - 2] = nums[nums.size() - 2];\n        profit = max(nums[nums.size() - 1], nums[nums.size() - 2]);\n        for (int i = nums.size() - 3; i >= 0; i--) {\n            dp[i] = nums[i] + dp[i + 2];\n            profit = max(profit, dp[i]);\n        }\n        return profit;\n        \n    }\n};","compare_result":"11111111111111111111101111111001110111110010000000000000000000000001","title_slug":"house-robber"}