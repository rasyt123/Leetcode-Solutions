{"id":550655055,"lang":"cpp","time":"5 months, 1 week","timestamp":1630971972,"status_display":"Accepted","runtime":"47 ms","url":"/submissions/detail/550655055/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"24.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass BSTIterator {\n    public:\n    BSTIterator(TreeNode* root) {\n        /*\n         I need an inorder traversal starting from the root\n         can add the items into a vector that holds the traversal\n         next can add to the currindex and return the item at \n         the current index \n\n         hasnext can return true if currindex is not out of range of the vector\n\n\n        */\n\n        currindex = -1;\n        vector<int> inordertraversal = {};\n        dfs(root);\n    }\n    void dfs(TreeNode* root) {\n        if (!root) {\n            return;\n        }\n\n        dfs(root->left);\n        inordertraversal.push_back(root->val);\n        dfs(root->right);\n    }\n    int next() {\n        ++currindex;\n        return inordertraversal[currindex];\n \n    }\n\n    bool hasNext() {\n        int index;\n        index = currindex;\n        ++index;\n        if (index >= inordertraversal.size()) {\n            return false;\n        } else {\n            return true;\n        }\n        \n    }\n    private:\n        int currindex;\n        vector<int> inordertraversal;\n};\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator* obj = new BSTIterator(root);\n * int param_1 = obj->next();\n * bool param_2 = obj->hasNext();\n */","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator"}