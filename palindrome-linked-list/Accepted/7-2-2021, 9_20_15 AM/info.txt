{"id":516389709,"lang":"cpp","time":"7 months, 1 week","timestamp":1625242815,"status_display":"Accepted","runtime":"168 ms","url":"/submissions/detail/516389709/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"115.5 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    bool isPalindrome(ListNode* head) {\n        ListNode* Head = head;\n        std::stack<int> stack1;\n        ListNode* prev = NULL;\n        ListNode* curr = head;\n        while (curr != NULL) {\n            ListNode* nextTemp = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = nextTemp;\n        }\n        curr = prev;\n        while (curr != NULL) {\n            stack1.push(curr->val);\n            curr = curr->next;\n        }\n        curr = prev;\n        while (curr != NULL) {\n            if (curr->val != stack1.top()) {\n                return false;\n            } else {\n                stack1.pop();\n            }\n            curr = curr->next;\n        }\n        if (stack1.empty()) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-linked-list"}