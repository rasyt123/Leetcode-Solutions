{"id":593097327,"lang":"cpp","time":"2 months, 2 weeks","timestamp":1637959366,"status_display":"Accepted","runtime":"19 ms","url":"/submissions/detail/593097327/","is_pending":"Not Pending","title":"Path Sum II","memory":"39 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {\n        /*\n        if the root is null:\n            just return \n        if the root is a leaf and the sum is equal to target:\n            push this into vector of vectors\n        We use a predorder traversal, going through the nodes, and \n        pushing them onto a vector \n        \n        return this referenced vector \n        \n        \n        */\n        vector<vector<int>> totalpaths;\n        vector<int> path;\n        dfs(root, targetSum, totalpaths, path, 0);\n        return totalpaths;\n    }\n    \n    \n    void dfs(TreeNode* root, int targetSum, vector<vector<int>>& totalpaths, vector<int> currpath, int sum) {\n        if (root == nullptr) {\n            return;\n        }\n        sum += root->val;\n        currpath.push_back(root->val);\n        if (root->left == nullptr and root->right == nullptr and sum == targetSum) {\n            totalpaths.push_back(currpath);\n        }\n        dfs(root->left, targetSum, totalpaths, currpath, sum);\n        dfs(root->right, targetSum, totalpaths, currpath, sum);  \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-sum-ii"}