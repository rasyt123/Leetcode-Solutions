{"id":548031557,"lang":"cpp","time":"5 months, 1 week","timestamp":1630533535,"status_display":"Accepted","runtime":"376 ms","url":"/submissions/detail/548031557/","is_pending":"Not Pending","title":"Generate Parentheses","memory":"378 MB","code":"class Solution {\npublic:\n    vector<string> generateParenthesis(int n) {\n        vector<string> combinations;\n        string base = \"()\";\n        string builder;\n        for (int i = 0; i < n; i++) {\n            builder += base;\n        }\n        dfs(0, combinations, builder, n);\n        return combinations;\n    }\n\n    void dfs(int currindex, vector<string>& combinations, string currstr, int n) {\n        char original = currstr[currindex];\n        if (isbalanced(currstr) and currindex == 2 * n) {\n            combinations.push_back(currstr);\n            return;\n        }\n\n        if (currindex == 2 * n) {\n            return;\n        }\n\n        if (currstr[currindex] == '(') {\n            currstr[currindex] = ')';\n        } else {\n            currstr[currindex] = '(';\n        }\n        dfs(currindex + 1, combinations, currstr, n);\n        currstr[currindex] = original;\n        dfs(currindex + 1, combinations, currstr, n);\n    }\n\n\n\n   bool isbalanced(string currstr) {\n    \tstack<char> balanced;\n    \tfor (int i = 0; i < currstr.size(); i++) {\n    \t\tif (currstr[i] == '(') {\n    \t\t\tbalanced.push('(');\n    \t\t} else {\n    \t\t\tif (balanced.empty()) {\n    \t\t\t\treturn false;\n    \t\t\t} else if (currstr[i] == ')') {\n    \t\t\t\tbalanced.pop();\n    \t\t\t}\n    \t\t}\n    \t}\n\n    \tif (!balanced.empty()) {\n    \t\treturn false;\n    \t} else {\n    \t\treturn true;\n    \t}\n    }\n};","compare_result":"11111111","title_slug":"generate-parentheses"}