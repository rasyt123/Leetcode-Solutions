{"id":548032925,"lang":"cpp","time":"5 months, 1 week","timestamp":1630533778,"status_display":"Accepted","runtime":"219 ms","url":"/submissions/detail/548032925/","is_pending":"Not Pending","title":"Generate Parentheses","memory":"125.6 MB","code":"class Solution {\npublic:\n    vector<string> generateParenthesis(int n) {\n        vector<string> combinations;\n        string base = \"()\";\n        string builder;\n        for (int i = 0; i < n; i++) {\n            builder += base;\n        }\n        dfs(0, combinations, builder, n);\n        return combinations;\n    }\n\n    void dfs(int currindex, vector<string>& combinations, string currstr, int n) {\n        char original = currstr[currindex];\n        if (isbalanced(currstr) and currindex == 2 * n) {\n            combinations.push_back(currstr);\n            return;\n        }\n\n        if (currindex == 2 * n) {\n            return;\n        }\n\n        if (currstr[currindex] == '(') {\n            currstr[currindex] = ')';\n        } else {\n            currstr[currindex] = '(';\n        }\n        dfs(currindex + 1, combinations, currstr, n);\n        currstr[currindex] = original;\n        dfs(currindex + 1, combinations, currstr, n);\n    }\n\n\n\n   bool isbalanced(string currstr) {\n    \tint balance = 0;\n        for (char c : currstr) {\n            if (c == '(') {\n                ++balance;\n            } else {\n                balance--;\n            }\n            if (balance < 0) {\n                return false;\n            }\n        }\n       return (balance == 0);\n    }\n};","compare_result":"11111111","title_slug":"generate-parentheses"}