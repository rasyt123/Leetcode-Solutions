{"id":532203769,"lang":"java","time":"6 months, 1 week","timestamp":1627924143,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/532203769/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"40 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        //A node that is an ancestor is one that has a value that is between p and q \n        // A parent node is one that has a node larger than itself or less than itself .\n\n        // Value of current node or parent node.\n        int parentVal = root.val;\n\n        // Value of p\n        int pVal = p.val;\n\n        // Value of q;\n        int qVal = q.val;\n        //The starting root is not an ancestor but the base. if both q and p's values are greater than the base\n        //and the base has an existing left and right pointers to left and right subtrees, then their exists\n        // another node that has a split, hence the \n        //\n\n        if (pVal > parentVal && qVal > parentVal) {\n            //If both p and qs values are greater than the current node's val.\n            //we know that both of those nodes are in the right subtree\n            //so we should keep exploring until we find \n            // If both p and q are greater than parent\n            return lowestCommonAncestor(root.right, p, q);\n        } else if (pVal < parentVal && qVal < parentVal) {\n            //We need to explore the left subtree for an ancestor \n            // If both p and q are lesser than parent\n            return lowestCommonAncestor(root.left, p, q);\n        } else {\n            // We have found the split point, i.e. the LCA node.\n            //\n            return root;\n        }\n    }\n}","compare_result":"111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree"}