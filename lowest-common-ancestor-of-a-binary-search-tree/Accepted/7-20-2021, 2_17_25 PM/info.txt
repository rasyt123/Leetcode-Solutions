{"id":525689803,"lang":"cpp","time":"6 months, 3 weeks","timestamp":1626815845,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/525689803/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"24.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        TreeNode* lca;\n        TreeNode* current;\n        bool foundp;\n        bool foundq;\n        vector<TreeNode*> BST;\n        queue<TreeNode*> add;\n        add.push(root);\n        while (!add.empty()) {\n            current = add.front();\n            add.pop();\n            if (current->left != nullptr) {\n                add.push(current->left);\n            }\n            if (current->right != nullptr) {\n                add.push(current->right);\n            }\n            BST.push_back(current);\n        }\n\n        for (int i = 0; i < BST.size(); i++) {\n            current = BST[i];\n            foundp = BSTContains(current, p);\n            foundq = BSTContains(current, q);\n            if (foundp and foundq) {\n                lca = current;\n            }\n        }\n        return lca;\n\n    }\n\n\n    bool BSTContains(TreeNode* currnode, TreeNode* descendant) {\n        TreeNode* beast = currnode;\n        while (beast) {\n            if (descendant->val == beast->val) {\n                return true;\n            }\n            if (descendant->val < beast->val) {\n                beast = beast->left;\n            } else {\n                beast = beast->right;\n            }\n        }\n\n        return false;\n    }\n};\n","compare_result":"111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree"}