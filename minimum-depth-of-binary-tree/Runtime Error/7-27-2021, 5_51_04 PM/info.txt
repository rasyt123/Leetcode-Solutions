{"id":529371906,"lang":"cpp","time":"6 months, 2 weeks","timestamp":1627433464,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/529371906/","is_pending":"Not Pending","title":"Minimum Depth of Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int minDepth(TreeNode* root) {\n        vector<int> depthvector;\n        int rootdepth = 1;\n        helper(root, depthvector, 1);\n        int minvalue;\n        minvalue = depthvector[0];\n        if (root == nullptr) {\n            return 0;\n        } else {\n            for (int i = 0; i < depthvector.size(); i++) {\n                if (depthvector[i] < minvalue) {\n                    minvalue = depthvector[i];\n                }\n            }\n            return minvalue;\n        }\n        \n        \n    }\n    \n    void helper(TreeNode* root, vector<int>& depthvector, int depth) {\n        if (root == nullptr) {\n            return;\n        }\n        if (root->left == nullptr and root->right == nullptr) {\n            depthvector.push_back(depth);\n            return;\n        } else {\n            ++depth;\n        }\n        \n        helper(root->left, depthvector, depth);\n        helper(root->right, depthvector, depth);\n    }\n};","compare_result":"1100000000000000000000000000000000000000000000000000","title_slug":"minimum-depth-of-binary-tree"}