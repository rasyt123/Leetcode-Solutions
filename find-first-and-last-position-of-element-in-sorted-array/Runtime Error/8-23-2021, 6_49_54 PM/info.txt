{"id":543184988,"lang":"cpp","time":"5 months, 3 weeks","timestamp":1629769794,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/543184988/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"N/A","code":"class Solution {\npublic:\n    vector<int> searchRange(vector<int>& nums, int target) {\n\n        /*\n        Find first and last position of element in sorted array\n        [8, 8, 8, 8]\n         l  m  r\n\n\n         Potential Solution:\n         Use binary search normally to split the array into two halves\n         but if the middle is the same as the target, then we can use two pointers\n         to go up and down the target.  one to search the first position and the second to find the right position\n\n\n\n        if the target is not found in the search, we shouldnt return it\n\n        */\n        int l = 0, r = nums.size() - 1;\n        vector<int> range;\n        while (l <= r) {\n            int mid = l + (r - l) / 2;\n            if (nums[mid] == target) {\n                int rpoint = mid + 1;\n                int lpoint = mid - 1;\n                while (nums[rpoint] == target and rpoint < nums.size()) {\n                    ++rpoint;\n                }\n                while (nums[lpoint] == target and lpoint >= 0) {\n                    --lpoint;\n                }\n                --rpoint;\n                lpoint++;\n                range.push_back(lpoint);\n                range.push_back(rpoint);\n                return range;\n            } else if (nums[mid] < target) {\n                l = mid + 1;\n            } else {\n                r = mid - 1;\n            }\n        }\n        range = {-1, -1};\n        return range;\n    }\n};","compare_result":"1111000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"find-first-and-last-position-of-element-in-sorted-array"}