{"id":540623306,"lang":"cpp","time":"5 months, 3 weeks","timestamp":1629324726,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/540623306/","is_pending":"Not Pending","title":"First Bad Version","memory":"5.7 MB","code":"// The API isBadVersion is defined for you.\n// bool isBadVersion(int version);\n\nclass Solution {\npublic:\n    int firstBadVersion(int n) {\n        /*\n        Binary Search Problem \n        \n        I have to call isBadVersion inside of here\n        all the versions after a bad version are also bad \n        \n        imagine 5 versions [1, 2, 3, 4, 5]\n        \n        [1, 2]\n         0  1 \n         L  R\n         m\n         \n         [1, 2, 3]\n         \n         [1]\n          R\n          L\n          M\n         \n        Set bad to be the middle every time \n    \n        Divide the number of versions in half and store the middle\n        \n        if the middle isn't bad,\n            then search the right half to see if they are bad\n        otherwise if the middle is bad:\n            search the left half to see if they are bad\n        */\n    \n        int l = 1, r = n;\n        int bad;\n        while (l <= r) {\n            int mid = l + (r - l) / 2;\n            if (isBadVersion(mid)) {\n                bad = mid;\n            }\n            if (!isBadVersion(mid)) {\n                l = mid + 1;\n            } else if (isBadVersion(mid)) {\n                r = mid - 1;\n            }\n        }\n        return bad;\n    }\n};","compare_result":"1111111111111111111111","title_slug":"first-bad-version"}