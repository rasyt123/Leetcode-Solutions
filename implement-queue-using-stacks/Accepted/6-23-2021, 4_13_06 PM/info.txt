{"id":512288180,"lang":"cpp","time":"7 months, 3 weeks","timestamp":1624489986,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/512288180/","is_pending":"Not Pending","title":"Implement Queue using Stacks","memory":"7.1 MB","code":"class MyQueue {\n    \n     private:\n        int size;\n        stack<int> s1;\n        stack<int> s2;\n        int item;\n    public:\n    /** Initialize your data structure here. */\n  \n        MyQueue() {\n        \n        }\n    \n    /** Push element x to the back of queue. */\n        void push(int x) {\n            int temp;\n            if (s1.empty()) {\n                s1.push(x);\n            } else {\n             while (s1.size() != 0) {\n                temp = s1.top();\n                s1.pop();\n                s2.push(temp);\n            }\n            s1.push(x);\n            while (s2.size() != 0) {\n                temp = s2.top();\n                s2.pop();\n                s1.push(temp);\n            }\n        }\n        \n    }\n    \n    /** Removes the element from in front of queue and returns that element. */\n    int pop() {\n        item = s1.top();\n        s1.pop();\n        return item;\n    }\n    \n    /** Get the front element. */\n    int peek() {\n        item = s1.top();\n        return item;\n    }\n    \n    /** Returns whether the queue is empty. */\n    bool empty() {\n        if (s1.empty()) {\n            return true;\n        } else {\n            return false;\n        }\n        \n    }\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue* obj = new MyQueue();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->peek();\n * bool param_4 = obj->empty();\n */","compare_result":"11111111111111111111","title_slug":"implement-queue-using-stacks"}