{"id":539125729,"lang":"cpp","time":"5 months, 4 weeks","timestamp":1629073785,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/539125729/","is_pending":"Not Pending","title":"Maximum Average Subarray I","memory":"N/A","code":"class Solution {\npublic:\n    double findMaxAverage(vector<int>& nums, int k) {\n        /*\n        \n        Sliding Window Approach\n        Im given an integer k \n        \n        1. Keep expanding the window until we've hit integer k\n        2. Slide one item from the left once we've calculated\n        a window of size k\n        3. Calculate the average of those items;\n        4. Save the average somewhere\n        \n        */\n     \n        \n        int minWindowSize = 1000;\n        float currentWindowSum = 0;\n        int windowStart = 0;\n        float currwinaverage = -10000;\n        float average;\n        for (int windowEnd = 0; windowEnd < nums.size(); windowEnd++) {\n            currentWindowSum += nums[windowEnd];\n            if (windowEnd >= k - 1) {\n                average = currentWindowSum / k;\n                if (average >= currwinaverage) {\n                    currwinaverage = average;\n                }\n                currentWindowSum -= nums[windowEnd - (k - 1)];\n            }\n        }\n        \n        return currwinaverage;\n\n    }\n        \n    \n};","compare_result":"1111111111111111111111111100111111111111111100000000000100100001000000000000111001000000110100111100111101111111111111111110011","title_slug":"maximum-average-subarray-i"}