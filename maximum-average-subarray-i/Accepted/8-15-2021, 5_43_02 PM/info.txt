{"id":539129470,"lang":"cpp","time":"5 months, 4 weeks","timestamp":1629074582,"status_display":"Accepted","runtime":"164 ms","url":"/submissions/detail/539129470/","is_pending":"Not Pending","title":"Maximum Average Subarray I","memory":"109.6 MB","code":"class Solution {\npublic:\n    double findMaxAverage(vector<int>& nums, int k) {\n        /*\n        \n        Sliding Window Approach\n        Im given an integer k \n        \n        1. Keep expanding the window until we've hit integer k\n        2. Slide one item from the left once we've calculated\n        a window of size k\n        3. Calculate the average of those items;\n        4. Save the average somewhere\n        \n        */\n     \n        \n        int minWindowSize = 1000;\n        double currentWindowSum = 0;\n        int windowStart = 0;\n        double currwinaverage = -100000;\n        double average;\n        for (int windowEnd = 0; windowEnd < nums.size(); windowEnd++) {\n            currentWindowSum += nums[windowEnd];\n            if (windowEnd >= k - 1) {\n                average = currentWindowSum / k;\n                currwinaverage = max(currwinaverage, average);\n                currentWindowSum -= nums[windowEnd - (k - 1)];\n            }\n        }\n        \n        return currwinaverage;\n\n    }\n};\n    ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-average-subarray-i"}