{"id":601386375,"lang":"cpp","time":"1 month, 4 weeks","timestamp":1639426715,"status_display":"Accepted","runtime":"76 ms","url":"/submissions/detail/601386375/","is_pending":"Not Pending","title":"Maximum Binary Tree","memory":"42.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {\n        /*\n        [3,2,1,6,0,5]\n\n        [3, 2, 1]\n\n        [0, 5]\n        l should start as zero and r should be nums.size() - 1\n\n        1. create a new node when recursing but have this node\n        be the max of the existing subarray or array\n\n        l index and r index\n        for left subarray prefix, r should me index of max - 1\n        and l should stay the same\n\n        for right subarray prefix, l should be index of max + 1\n        and r should be end of the array\n\n        */\n        int l = 0;\n        int r = nums.size() - 1;\n        TreeNode* result = buildTree(nums, l, r);\n        return result;\n    }\n\n\n    TreeNode* buildTree(vector<int>& nums, int l, int r) {\n        if (l > r) {\n            return nullptr;\n        }\n     \n        int maxval = nums[l];\n        int maxid = l;\n        for (int left = l; left <= r; left++) {\n            if (nums[left] > maxval) {\n                maxval = nums[left];\n                maxid = left;\n            }\n        }\n        TreeNode* maxnode = new TreeNode;\n        maxnode->val = maxval;\n        maxnode->left = buildTree(nums, l, maxid - 1);\n        maxnode->right = buildTree(nums, maxid + 1, r);\n        return maxnode;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-binary-tree"}