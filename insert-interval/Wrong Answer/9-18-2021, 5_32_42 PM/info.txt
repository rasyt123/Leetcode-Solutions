{"id":557221106,"lang":"cpp","time":"4 months, 3 weeks","timestamp":1632011562,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/557221106/","is_pending":"Not Pending","title":"Insert Interval","memory":"N/A","code":"class Solution {\npublic:\n    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {\n        /*\n\n        create new sorted vec for comparisons\n        [3, 5][4, 8]\n\n\n        newinterval = [4, 8]\n        comparison interval = [3, 5]\n\n        newinterval = [3, 8]\n        comparison interval = [8, 10]\n\n        [8, 10]\n        iterate through the intervals\n\n        if the comparison interval's start is less than or equal to the new interval's end\n        merge and update the interal\n\n        merge by taking the minimum start interal and taking the comparison interal end\n\n\n        [3, 10] new interval\n        [12, 16] comparison interval\n\n\n        [12, 16] new interval\n        [14, 17] comparison\n        [3, 8][6, 7]\n\n        prev = inf;\n        for each interval:\n            if overlapping:\n                create vector with {prev, comparison interval end} called temp\n            otherwise:\n                if temp actually exists:\n                    add temp vector to the list of new intervals\n                add non overlapping vector\n                set newinterval to be\n\n        */\n\n        sort(intervals.begin(), intervals.end());\n\n        vector<vector<int>> result;\n        vector<vector<int>> comparison;\n        vector<int> temp;\n        int end;\n        if (intervals.size() == 0) {\n            result.push_back(newInterval);\n            return result;\n        }\n\n\n        for (vector<int> item : intervals) {\n            if (comparison.empty()) {\n                comparison.push_back(item);\n                comparison.push_back(newInterval);\n                sort(comparison.begin(), comparison.end());\n\n                if (comparison[1][0] <= comparison[0][1]) {\n                    end = max(comparison[0][1], comparison[1][1]);\n                    newInterval = {comparison[0][0], end};\n                    temp = newInterval;\n                } else {\n                    result.push_back(item);\n                    if (temp.size() > 0) {\n                        result.push_back(temp);\n                        temp = {};\n                    } else if (item == intervals[intervals.size() - 1]) {\n                        result.push_back(newInterval);\n                    }\n                }\n                if ((intervals.size() == 1 and item == newInterval) or (intervals.size() == 0)) {\n                    comparison.pop_back();\n                    return comparison;\n                }\n                comparison = {};\n            }\n        }\n        if (result.size() == 0) {\n            result.push_back(temp);\n        }\n        sort(result.begin(), result.end());\n\n        return result;\n\n\n    }\n\n};","compare_result":"111111111111111111110011011111111110111000011000011111110111011110001011010111111000100101001000001010011011101010000001100011001000110010000100000000001111","title_slug":"insert-interval"}