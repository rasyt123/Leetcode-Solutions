{"id":584428680,"lang":"cpp","time":"3Â months","timestamp":1636451001,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/584428680/","is_pending":"Not Pending","title":"Subarray Product Less Than K","memory":"N/A","code":"class Solution {\npublic:\n    int numSubarrayProductLessThanK(vector<int>& nums, int k) {\n        /*\n        We use two pointers\n        one l pointer and one r pointer\n\n        l and r start at the front of the list\n\n  product = 1;\n  l = 0\n  r = 0\n  while l or r are less than the list size\n        if the product is greater than k or r is greater than the length of numss.size() - 1;\n            increment l by 1\n            set r = l\n            reset the product\n            product = 1;\n\n        product * = nums[r];\n        if product is within range:\n            we add one to the counter\n\n        increment r by 1\n        */\n\n        int product = 1;\n        int l = 0;\n        int r = 0;\n        int count = 0;\n        while (l < nums.size() or r < nums.size()) {\n            if (l == nums.size() - 1 and r > nums.size() - 1) {\n                break;\n            }\n            if (product >= k or r > nums.size() - 1) {\n                l += 1;\n                r = l;\n                product = 1;\n            }\n            product *= nums[r];\n            if (product < k) {\n                count += 1;\n            }\n            r += 1;\n\n        }\n        return count;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000","title_slug":"subarray-product-less-than-k"}