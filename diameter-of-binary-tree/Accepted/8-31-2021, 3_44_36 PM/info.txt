{"id":547479463,"lang":"cpp","time":"5 months, 1 week","timestamp":1630449876,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/547479463/","is_pending":"Not Pending","title":"Diameter of Binary Tree","memory":"20.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int diameterOfBinaryTree(TreeNode* root) {\n        vector<int> depthvector;\n        dfs(root, depthvector);\n\n        return *max_element(depthvector.begin(), depthvector.end());\n\n\n    }\n    int findHeight(TreeNode* root) {\n        if (root == nullptr)\n            return 0;\n        return 1 + max(findHeight(root->left), findHeight(root->right));\n    }\n\n\n\n    void dfs(TreeNode* root, vector<int>& depthvector) {\n        int heightleft;\n        int heightright;\n        if (root == nullptr) {\n            return;\n        }\n\n        heightleft = findHeight(root->left);\n        heightright = findHeight(root->right);\n        depthvector.push_back(heightleft + heightright);\n\n        dfs(root->left, depthvector);\n        dfs(root->right, depthvector);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"diameter-of-binary-tree"}