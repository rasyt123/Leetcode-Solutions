{"id":547472066,"lang":"cpp","time":"5 months, 1 week","timestamp":1630448457,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/547472066/","is_pending":"Not Pending","title":"Diameter of Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int diameterOfBinaryTree(TreeNode* root) {\n        /*\n          1. Find the maximum depth of the node in the left subtree\n          2. Find the maximum depth of the node in ther right subtree\n  \n          add these two depths together\n  \n          if the subtree on the right is null, then just set the maximum depth of the node as zero\n          if the subtree on the left is null, then just set the maximum depth of the node to be zero\n  \n        */\n        vector<int> depthvector;\n        vector<int> depthvector2;\n        int rootdepth = 1;\n        int depth1;\n        int depth2;\n        dfs(root->left, depthvector, 1);\n        dfs(root->right, depthvector2, 1);\n        if (root->left == nullptr) {\n            depth1 = 0;\n        } else {\n            depth1 = *max_element(depthvector.begin(), depthvector.end());\n        }\n        if (root->right == nullptr) {\n            depth2 = 0;\n        } else {\n            depth2 = *max_element(depthvector2.begin(), depthvector2.end());\n        }\n        \n\n        return depth1 + depth2;\n\n\n    }\n\n    void dfs(TreeNode* root, vector<int>& depthvector, int depth) {\n        if (root == nullptr) {\n            return;\n        }\n        if (root->left == nullptr and root->right == nullptr) {\n            depthvector.push_back(depth);\n            return;\n        } else {\n            ++depth;\n        }\n        dfs(root->left, depthvector, depth);\n        dfs(root->right, depthvector, depth);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110001011","title_slug":"diameter-of-binary-tree"}