{"id":539153770,"lang":"cpp","time":"5 months, 4 weeks","timestamp":1629079407,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/539153770/","is_pending":"Not Pending","title":"Substrings of Size Three with Distinct Characters","memory":"6.9 MB","code":"class Solution {\npublic:\n   int countGoodSubstrings(string s) {\n\n       /*\n\n       Sliding Window Approach:\n       Return number of substrings of size 3 that\n       have no unique characters\n       slide to the right 3 every iteration\n\n       keep expanding the window until we have a size of 3\n       if the characters in the hashmap are all distinct, then\n       we calculate the length\n       */\n       map<char, int> charfreq;\n       int goodstringcount = 0;\n       int windowstart = 0;\n       bool good = true;\n       for (int windowend = 0; windowend < s.size(); windowend++) {\n           char rightchar = s[windowend];\n           if (charfreq.find(rightchar) != charfreq.end()) {\n               ++charfreq[rightchar];\n           } else {\n               charfreq[rightchar] = 1;\n           }\n           if (windowend - windowstart + 1 == 3) {\n               for (auto item : charfreq) {\n                   if (item.second > 1) {\n                       good = false;\n                       break;\n                   }\n               }\n               if (good) {\n                   ++goodstringcount;\n               }\n               char leftchar = s[windowstart];\n               --charfreq[leftchar];\n               if (charfreq[leftchar] == 0) {\n                   charfreq.erase(leftchar);\n               }\n               windowstart++;\n           }\n\n           good = true;\n       }\n       return goodstringcount;\n\n   }\n};\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"substrings-of-size-three-with-distinct-characters"}