{"id":587486064,"lang":"cpp","time":"2 months, 4 weeks","timestamp":1636969407,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/587486064/","is_pending":"Not Pending","title":"Average of Levels in Binary Tree","memory":"22.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<double> averageOfLevels(TreeNode* root) {\n        /*\n        We can do a bfs at each level, \n        iterate through each node at the level, then \n        add up all the numbers and divide them by the number of nodes on\n        the level, then add them to a vector \n        \n        */\n            \n        queue<TreeNode*> q1;\n        q1.push(root);\n        double sum = 0;\n        double curraverage;\n        vector<double> doublesaverages;\n        while (!q1.empty()) {\n            int size = q1.size();\n            vector<double> currlevelnodes;\n            for (int i = 0; i < size; i++) {\n                TreeNode* curr = q1.front();\n                q1.pop();\n                sum += curr->val;\n                if (curr->left != nullptr) {\n                    q1.push(curr->left);\n                }\n                if (curr->right != nullptr) {\n                    q1.push(curr->right);\n                }\n            }\n            curraverage = sum / size;\n            doublesaverages.push_back(curraverage);\n            sum = 0;\n        }\n        return doublesaverages;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"average-of-levels-in-binary-tree"}