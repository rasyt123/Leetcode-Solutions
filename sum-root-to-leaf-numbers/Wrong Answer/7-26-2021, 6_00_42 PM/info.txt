{"id":528839950,"lang":"cpp","time":"6 months, 2 weeks","timestamp":1627347642,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/528839950/","is_pending":"Not Pending","title":"Sum Root to Leaf Numbers","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int sumNumbers(TreeNode* root) {\n        int total;\n        string pathsum;\n        vector<string> sumnums;\n        //Need to carry a string over to all the paths and keeping adding letters to the string\n        //use stoi to convert the value of the string to an integer\n        //use vector of vector of strings to hold all path values\n        //if the left and right of the currentnode is null, then we add the string to the vector of strings\n        //after all the recursive calls are done, we can just sum up all the strings inside of the vector\n        //Use postorder traversal\n        addnums(root, sumnums, pathsum);\n        for (auto item : sumnums) {\n            total += stoi(item);\n        }\n        return total;\n\n    }\n\n    void addnums(TreeNode* root, vector<string>& sumnums, string pathsum) {\n        pathsum += to_string(root->val);\n        if (root->left == nullptr and root->right == nullptr) {\n            sumnums.push_back(pathsum);\n            return;\n        }\n\n        addnums(root->left, sumnums, pathsum);\n        addnums(root->right, sumnums, pathsum);\n        return;\n    }\n};\n","compare_result":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"sum-root-to-leaf-numbers"}