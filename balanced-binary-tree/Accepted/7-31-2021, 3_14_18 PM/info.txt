{"id":531267617,"lang":"cpp","time":"6 months, 2 weeks","timestamp":1627769658,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/531267617/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"20.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isBalanced(TreeNode* root) {\n        //use recursive bfs calling the left and right of the node of the binary tree\n        // you need to recursive calls to cover the right subtree and left subtree\n        // you only need one parameter for this recursive function \n        //\n        //so basically, \n        //isBalanced(TreeNode* root1, TreeNode* root2)\n        // if root1 and root2 are both nullptr, then \n        //      should just set the depth to be zero\n        //if abs(depth(root1) - depth(root2->left)) > 1\n        // return false\n        // else:\n        //    isBalanced(root1->left, root1->right);\n        //    isBalanced(root2->left, root2->right);\n        //\n        //\n        //Start with using the  \n        //Use depth helper//\n        //Calculates the height of a subtree;\n        if (root == nullptr) {\n            return true;\n        }\n        if (!checkHeight(root->left, root->right)) {\n            return false;\n        } else {\n            return true;\n        }\n    \n    \n        \n    }\n    \n    bool checkHeight(TreeNode* root1, TreeNode* root2) {\n        int height1;\n        int height2;\n        \n        height1 = Height(root1);\n        height2 = Height(root2);\n        \n        if (abs(height1 - height2) > 1) {\n            return false;\n        } else if (root1 != nullptr and root2 != nullptr) {\n            return checkHeight(root1->left, root1->right) and checkHeight(root2->left, root2->right);\n        }\n        return true;\n    }\n    \n    int Height(TreeNode* root) {\n        if(root==NULL)\n            return 0;\n        return max(Height(root->left),Height(root->right))+1;\n    }\n        \n        \n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree"}