{"id":535609930,"lang":"java","time":"6Â months","timestamp":1628489513,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/535609930/","is_pending":"Not Pending","title":"Backspace String Compare","memory":"37.2 MB","code":"class Solution {\n    public boolean backspaceCompare(String S, String T) {\n        int i = S.length() - 1, j = T.length() - 1;\n        int skipS = 0, skipT = 0;\n\n        while (i >= 0 || j >= 0) { // While there may be chars in build(S) or build (T)\n            while (i >= 0) { // Find position of next possible char in build(S)\n                if (S.charAt(i) == '#') {skipS++; i--;}\n                else if (skipS > 0) {skipS--; i--;}\n                else break;\n            }\n            while (j >= 0) { // Find position of next possible char in build(T)\n                if (T.charAt(j) == '#') {skipT++; j--;}\n                else if (skipT > 0) {skipT--; j--;}\n                else break;\n            }\n            // If two actual characters are different\n            if (i >= 0 && j >= 0 && S.charAt(i) != T.charAt(j))\n                return false;\n            // If expecting to compare char vs nothing\n            if ((i >= 0) != (j >= 0))\n                return false;\n            i--; j--;\n        }\n        return true;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"backspace-string-compare"}