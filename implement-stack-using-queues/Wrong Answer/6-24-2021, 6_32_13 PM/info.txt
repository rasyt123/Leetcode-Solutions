{"id":512792295,"lang":"cpp","time":"7 months, 3 weeks","timestamp":1624584733,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/512792295/","is_pending":"Not Pending","title":"Implement Stack using Queues","memory":"N/A","code":"class MyStack {\n    private:\n      queue<int> q1;\n      queue<int> q2;\n    \n    public:\n    /** Initialize your data structure here. */\n    MyStack() {\n        \n    }\n    \n    /** Push element x onto stack. */\n    void push(int x) {\n        q1.push(x);\n    }\n    \n    /** Removes the element on top of the stack and returns that element. */\n    int pop() {\n        int temp;\n        int temp2;\n        if (q1.size() == 1) {\n            q1.pop();\n            return q1.front();\n        }\n        while (q1.size() != 1) {\n            temp = q1.front();\n            q1.pop();\n            q2.push(temp);\n        }\n        q1.pop();\n        while (q2.size() != 0) {\n            temp = q2.front();\n            q2.pop();\n            q1.push(temp);\n        }\n        return temp;\n    }\n    \n    /** Get the top element. */\n    int top() {\n        int temp;\n        int temp2;\n        while (q1.size() != 1) {\n            temp = q1.front();\n            q1.pop();\n            q2.push(temp);\n        }\n        temp2 = q1.front();\n        while (q2.size() != 0) {\n            temp = q2.front();\n            q2.pop();\n            q1.push(temp);\n        }\n        return temp2;\n        \n    }\n    \n    /** Returns whether the stack is empty. */\n    bool empty() {\n        if (q1.empty()) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n};\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack* obj = new MyStack();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->top();\n * bool param_4 = obj->empty();\n */","compare_result":"1111011001010000","title_slug":"implement-stack-using-queues"}