{"id":534287658,"lang":"cpp","time":"6 months, 1 week","timestamp":1628265034,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/534287658/","is_pending":"Not Pending","title":"Linked List Cycle","memory":"11.2 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        //3 - > 2 - > 0 -> -4\n        // - > 2 \n        // First we need to check if the next is null\n        // return false immediately \n        //we need to go through the linked list one by one \n        // Use hashtable to remember each of the nodes mapped to the index\n        // if the next pointer is an node that exists in the hashtable\n        //return true;\n        map<ListNode*, int> l1nodes;\n        \n        ListNode* curr = head;\n        int index = 0;\n        while (curr != nullptr) {\n            if (curr->next == nullptr) {\n                return false;\n            }\n            if (l1nodes.find(curr) != l1nodes.end()) {\n                return true;\n            }\n            l1nodes[curr] = index;\n            ++index;\n            curr = curr->next;\n        }\n        return false;\n        \n    }\n};","compare_result":"11111111111111111111","title_slug":"linked-list-cycle"}