{"id":541248152,"lang":"cpp","time":"5 months, 3 weeks","timestamp":1629431333,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/541248152/","is_pending":"Not Pending","title":"Clone Graph","memory":"9.1 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> neighbors;\n    Node() {\n        val = 0;\n        neighbors = vector<Node*>();\n    }\n    Node(int _val) {\n        val = _val;\n        neighbors = vector<Node*>();\n    }\n    Node(int _val, vector<Node*> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* cloneGraph(Node* node) {\n        map<int, Node*> G2;\n        map<Node*, bool> marked;\n        Node* clone;\n        if (node == nullptr) {\n            return nullptr;\n        }\n        \n        dfs(node, G2, marked);\n        return G2[node->val];\n    }\n    \n    \n    void dfs(Node* node, map<int, Node*>& G2,  map<Node*, bool>& marked) {\n        int nodeval;\n        Node* newnode = nullptr;\n        if (marked.find(node) == marked.end()) {\n            newnode = new Node(node->val);\n            G2[newnode->val] = newnode;\n        }\n        marked[node] = true;\n        for (Node* item : node->neighbors) {\n            if(marked.find(item) == marked.end()) {\n                dfs(item, G2, marked);\n            }\n        }\n        if (newnode != nullptr) {\n            for (Node* item : node->neighbors) {\n                nodeval = item->val;\n                newnode->neighbors.emplace_back(G2[nodeval]);\n            }\n        }\n    }\n\n        \n        \n};","compare_result":"1111111111111111111111","title_slug":"clone-graph"}