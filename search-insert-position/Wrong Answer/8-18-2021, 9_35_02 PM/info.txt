{"id":540752810,"lang":"cpp","time":"5 months, 3 weeks","timestamp":1629347702,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/540752810/","is_pending":"Not Pending","title":"Search Insert Position","memory":"N/A","code":"class Solution {\npublic:\n    int searchInsert(vector<int>& nums, int target) {\n\n\n        /*\n        Binary Search Question\n\n        [1, 2, 3, 4, 5, 6]\n         0  1  2  3  4  5\n\n         [1, 2, 3]\n          L  M  R\n\n\n        [1, 3, 5, 6]\n         0  1  2  3\n\n         [1, 3]\n          L  R\n          M\n\n          [3]\n\n\n        So pretty much, if the value of the middle is greater than the target\n        then we look at the left side of  the array\n\n        if the middle of the array is less than the target, we look at the\n        right side of the array\n\n        if the middle is\n\n\n        if the index that is returned at the end is the same as the size of nums - 1\n           then we return that\n        otherwise\n           we return mid\n\n         We use regular binary search and return the index if it exists\n\n        */\n\n\n        int l = 0, r = nums.size() - 1;\n        int mid;\n        while (l < r) {\n            mid = l + (r - l) / 2;\n            if (nums[mid] == target) {\n                return mid;\n            } else if (nums[mid] < target) {\n                l = mid + 1;\n            } else {\n                r = mid;\n            }\n        }\n        mid = l + (r - l) / 2;\n        if (mid == nums.size() - 1 and nums.size() > 1) {\n            return mid + 1;\n        } else {\n            return mid;\n        }\n\n    }\n};","compare_result":"11111101100111110011111111111111111100110111111111111111101111","title_slug":"search-insert-position"}