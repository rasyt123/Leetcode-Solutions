{"id":529361139,"lang":"cpp","time":"6 months, 2 weeks","timestamp":1627431165,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/529361139/","is_pending":"Not Pending","title":"Merge Two Binary Trees","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\n\n        mergeoverlap(root1, root2);\n        return root1;\n\n        //merge helper\n\n        //mergetrees(root1 left, root1 left, root2left, root2left)\n        //mergetrees(root1 right, root1 right, root2right,  )\n\n\n    }\n\n    void mergeoverlap(TreeNode* root1, TreeNode* root2) {\n        TreeNode* temp;\n        if (root2 == nullptr) {\n            return;\n        }\n\n\n        if (root1 == nullptr and root2 == nullptr) {\n            return;\n        }\n\n        if (root1 != nullptr and root2 != nullptr) {\n            root1->val = root1->val + root2->val;\n        }\n\n        if (root1->right == nullptr and root2->right != nullptr) {\n            root1->right = root2->right;\n            root2->right = nullptr;\n        }\n\n        if (root1->left == nullptr and root2->left != nullptr) {\n            root1->left = root2->left;\n            root2->left = nullptr;\n        }\n\n        mergeoverlap(root1->left, root2->left);\n        mergeoverlap(root1->right, root2->right);\n\n    }\n\n\n};","compare_result":"11100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"merge-two-binary-trees"}