{"id":513219534,"lang":"cpp","time":"7 months, 2 weeks","timestamp":1624669856,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/513219534/","is_pending":"Not Pending","title":"Merge Two Sorted Lists","memory":"N/A","code":"class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (l1 == nullptr and l2 == nullptr) {\n            return l1;\n        }\n        ListNode* head = nullptr;\n        ListNode* temp;\n        ListNode* l1front = l1;\n        ListNode* l2front = l2;\n        ListNode* prev;\n        ListNode* tail;\n        bool found;\n        int minimumval;\n        if (l1 != nullptr) {\n            minimumval = l1->val;\n        } else if (l2 != nullptr) {\n            minimumval = l2->val;\n        }\n        while (l1 != nullptr or l2 != nullptr) {\n            l1 = l1front;\n            while (l1 != nullptr) {\n                if (l1->val <= minimumval) {\n                    minimumval = l1->val;\n                }\n                l1 = l1->next;\n            }\n            l1 = l1front;\n            l2 = l2front;\n            while (l2 != nullptr) {\n                if (l2->val <= minimumval) {\n                    minimumval = l2->val;\n                }\n                l2 = l2->next;\n            }\n            l2 = l2front;\n            while (l1 != nullptr) {\n                if (minimumval == l1->val) {\n                    temp = l1;\n                    found = true;\n                    break;\n                }\n                l1 = l1->next;\n            }\n            if (found) {\n                l1front = temp->next;\n                found = false;\n            } else {\n                while (l2 != nullptr) {\n                    if (minimumval == l2->val) {\n                        temp = l2;\n                        l2front = temp->next;\n                        break;\n                    }\n                    l2 = l2->next;\n                }\n            }\n            if (head == nullptr) {\n                head = temp;\n                head->next = nullptr;\n                tail = head;\n            } else {\n                if (l1 == nullptr and l2 == nullptr) {\n                    break;\n                } else {\n                    tail->next = temp;\n                    tail = temp;\n                    tail->next = nullptr;\n                }\n            }\n            if (l1 != nullptr) {\n                if (l1front == nullptr) {\n                    minimumval = temp->val;\n                } else {\n                    minimumval = l1front->val;\n                }\n            } else {\n                if (l2 != nullptr) {\n                    if (l2front == nullptr) {\n                        minimumval = temp->val;\n                    } else {\n                        minimumval = l2front->val;\n                    }\n                }\n            }\n        }\n        return head;\n\n    }\n};","compare_result":"1111001100110000111001001000000000110100010000011110101000000000110010110101101000000100000000100000000000000001010011110001000101000001110101100000010010100000100000000010001110000000000001000110001000100001","title_slug":"merge-two-sorted-lists"}