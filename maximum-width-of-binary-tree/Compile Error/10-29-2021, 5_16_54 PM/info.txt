{"id":579231523,"lang":"java","time":"3 months, 2 weeks","timestamp":1635553014,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/579231523/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n public int widthOfBinaryTree(TreeNode root) {\n        return dfs(root, 0, 1, new ArrayList<Integer>(), new ArrayList<Integer>());\n    }\n    \n    public int dfs(TreeNode root, int level, int order, List<Integer> start, List<Integer> end){\n        if(root == null)return 0;\n        if(start.size() == level){\n            start.add(order); end.add(order);\n        }\n        else end.set(level, order);\n        int cur = end.get(level) - start.get(level) + 1;\n        int left = dfs(root.left, level + 1, 2*order, start, end);\n        int right = dfs(root.right, level + 1, 2*order + 1, start, end);\n        return Math.max(cur, Math.max(left, right));\n    }","compare_result":null,"title_slug":"maximum-width-of-binary-tree"}