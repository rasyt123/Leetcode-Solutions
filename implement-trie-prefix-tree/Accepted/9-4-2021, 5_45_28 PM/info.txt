{"id":549591649,"lang":"cpp","time":"5 months, 1 week","timestamp":1630802728,"status_display":"Accepted","runtime":"76 ms","url":"/submissions/detail/549591649/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"34.1 MB","code":"class Trie {\npublic:\n    /** Initialize your data structure here. */\n    Trie() {\n        map<char, Trie*> children;\n        bool endofword = false;\n        prefixchecker = nullptr;\n\n    }\n    map<char, Trie*> children;\n    bool endofword;\n    Trie* prefixchecker;\n    /** Inserts a word into the trie. */\n    void insert(string word) {\n        /*\n        Want to insert a b c\n\n        */\n        Trie* newnode;\n        Trie* temp;\n        newnode = this;\n        if (children.count(word[0]) == 0) {\n            newnode = new Trie;\n            newnode->endofword = false;\n            children[word[0]] = newnode;\n            newnode = this;\n        }\n\n        for (int i = 0; i < word.size(); i++) {\n            if (newnode->children.count(word[i]) != 0) {\n                newnode = newnode->children[word[i]];\n                if (i == word.size() - 1) {\n                    newnode->endofword = true;\n                }\n            } else {\n                temp = new Trie;\n                temp->endofword = false;\n                newnode->children[word[i]] = temp;\n                newnode = temp;\n            }\n        }\n        temp->endofword = true;\n\n    }\n\n    /** Returns if the word is in the trie. */\n    bool search(string word) {\n        int i = 0;\n        Trie* newnode;\n        newnode = this;\n        while (i < word.size())  {\n            if (newnode->children.count(word[i]) != 0) {\n                newnode = newnode->children[word[i]];\n            } else {\n                return false;\n            }\n            i++;\n        }\n        if (!newnode->endofword and i == word.size()) {\n            return false;\n        }\n        prefixchecker = newnode;\n        return true;\n    }\n\n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    bool startsWith(string prefix) {\n        //I need to go to the last item in the prefix's hashmap and check if it is empty\n        int i = 0;\n        Trie* newnode;\n        newnode = this;\n        while (i < prefix.size()) {\n            if (newnode->children.count(prefix[i]) != 0) {\n                newnode = newnode->children[prefix[i]];\n            } else {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj->insert(word);\n * bool param_2 = obj->search(word);\n * bool param_3 = obj->startsWith(prefix);\n */","compare_result":"111111111111111","title_slug":"implement-trie-prefix-tree"}