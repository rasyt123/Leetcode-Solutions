{"id":603362856,"lang":"cpp","time":"1Â month, 3Â weeks","timestamp":1639790121,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/603362856/","is_pending":"Not Pending","title":"Middle of the Linked List","memory":"7.1 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* middleNode(ListNode* head) {\n        /*\n        We use two pointers\n        one slow and one fast \n        \n        fast = 2ms/ s \n        slow = 1ms/s \n        \n        When the fast pointer finishes going to the end from one point to antother, and because it moves twice as fast \n        as slow, slow will be at the halfway point of the linked list \n        when fast reaches the end \n        \n        \n            4ms      \n        - - - - -\n        \n        - - - \n           2ms \n        \n        \n        */\n        \n        ListNode* slow = head;\n        ListNode* fast = head;\n        while (fast != nullptr and fast->next != nullptr) {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        return slow;\n        \n        \n    }\n};","compare_result":"111111111111111111111111111111111111","title_slug":"middle-of-the-linked-list"}