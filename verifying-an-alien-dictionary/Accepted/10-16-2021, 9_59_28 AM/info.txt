{"id":572194028,"lang":"java","time":"3 months, 3 weeks","timestamp":1634403568,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/572194028/","is_pending":"Not Pending","title":"Verifying an Alien Dictionary","memory":"39.2 MB","code":"class Solution {\n    public boolean isAlienSorted(String[] words, String order) {\n        int[] orderMap = new int[26];\n        for (int i = 0; i < order.length(); i++){\n            orderMap[order.charAt(i) - 'a'] = i;\n        }\n\n        for (int i = 0; i < words.length - 1; i++) {\n\n            for (int j = 0; j < words[i].length(); j++) {\n                // If we do not find a mismatch letter between words[i] and words[i + 1],\n                // we need to examine the case when words are like (\"apple\", \"app\").\n                if (j >= words[i + 1].length()) return false;\n\n                if (words[i].charAt(j) != words[i + 1].charAt(j)) {\nint currentWordChar = words[i].charAt(j) - 'a';\nint nextWordChar = words[i + 1].charAt(j) - 'a';\n                    if (orderMap[currentWordChar] > orderMap[nextWordChar]) return false;\n                    // if we find the first different letter and they are sorted,\n                    // then there's no need to check remaining letters\n                    else break;\n                }\n            }\n        }\n\n        return true;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"verifying-an-alien-dictionary"}