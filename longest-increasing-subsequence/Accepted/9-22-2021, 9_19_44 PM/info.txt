{"id":559536645,"lang":"cpp","time":"4 months, 3 weeks","timestamp":1632370784,"status_display":"Accepted","runtime":"256 ms","url":"/submissions/detail/559536645/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"10.5 MB","code":"class Solution {\npublic:\n    // There's a typical DP solution with O(N^2) Time and O(N) space \n    // DP[i] means the result ends at i\n    // So for dp[i], dp[i] is max(dp[j]+1), for all j < i and nums[j] < nums[i]\n    int lengthOfLIS(vector<int>& nums) {\n        const int size = nums.size();\n        if (size == 0) { return 0; } \n        vector<int> dp(size, 1);\n        int res = 1;\n        for (int i = 1; i < size; ++i) {\n            for (int j = 0; j < i; ++j) {\n                if (nums[j] < nums[i]) {\n                    dp[i] = max(dp[i], dp[j]+1);\n                }\n            }\n            res = max (res, dp[i]);\n        }\n        return res;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-subsequence"}