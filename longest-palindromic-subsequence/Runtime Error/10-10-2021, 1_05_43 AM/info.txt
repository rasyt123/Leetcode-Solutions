{"id":568761384,"lang":"cpp","time":"4Â months","timestamp":1633853143,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/568761384/","is_pending":"Not Pending","title":"Longest Palindromic Subsequence","memory":"N/A","code":"class Solution {\npublic:\n    int longestPalindromeSubseq(string s) {\n        /*\n        two pointers l pointer on left and r pointer on right \n        \n        Sub problems:\n        When breaking down the palindrome and removing characters to see\n        if the palindrome is nested in another portion of the string, the same \n        check might occur so we can reuse the value of the longest palindromic substring \n        \n        how will I get the string itself \n      \n        \n        I need to compare the pointers at the front of the string and the back of the string \n        if the characters are equal, that portion of the string is part of the palidrome, so we\n        can increment left pointer and decrement right pointer \n        \n     \n        bbbab\n        \n        \n        bba\n          bb\n          ba\n          \n        \n        palindromicsub(string s, i, j) \n        if the length of palindromic sub is gr\n        */\n        int stringsize = s.size();\n        vector<vector<int>> dp(stringsize, vector<int>(stringsize, 0));\n        int result;\n        result = palindromicsub(s, 0, s.size() - 1, dp);\n        if (result == 0) {\n            return 1;\n        }\n        return result;\n    }\n    \n    \n    \n    //Brute force solution\n    \n    int palindromicsub(string s, int i, int j, vector<vector<int>>& dp) {\n        if (dp[i][j] > 0) {\n            return dp[i][j];\n        }\n        if (i > j) {\n            return 0;\n        }\n        if (i == j) {\n            dp[i][j] = 1;\n        }\n        if (s[i] == s[j]) {\n          dp[i][j] = 2 + palindromicsub(s, i + 1, j - 1, dp);\n        } else {\n          dp[i][j] = max(palindromicsub(s, i + 1, j, dp), palindromicsub(s, i, j - 1, dp));\n        }\n        return dp[i][j];\n        \n    }\n};","compare_result":"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"longest-palindromic-subsequence"}