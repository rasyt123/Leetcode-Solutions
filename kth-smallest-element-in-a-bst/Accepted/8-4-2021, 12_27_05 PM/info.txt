{"id":533350905,"lang":"cpp","time":"6 months, 1 week","timestamp":1628105225,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/533350905/","is_pending":"Not Pending","title":"Kth Smallest Element in a BST","memory":"24.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int kthSmallest(TreeNode* root, int k) {\n        //try inorder traversal\n        //With an inorder traversal, it is LNR, so you process nodes starting fro mthe bottom left and then the right \n        //And you ripple up/.\n        //as you pop the elements from the stack, since the top of the stack has all the bottom nodes,\n        //we can keep decrementing a variable that is equivalent to k \n        // and once that variable is equal to k, then we should return the val that is currently on the stack\n        stack<TreeNode*> s1;\n        TreeNode* node = root;\n        \n        if (root == nullptr) {\n            return 0;\n        }\n        \n        \n        while (true) {\n            if (node != nullptr) {\n                s1.push(node);\n                node = node->left;\n            } else {\n                if (s1.empty()) {\n                    break;\n                }\n                node = s1.top();\n                if (k == 1) {\n                    return node->val;\n                }\n                s1.pop();\n                --k;\n                node = node->right;\n            } \n        }\n        return node->val;\n    \n        \n          \n        \n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"kth-smallest-element-in-a-bst"}