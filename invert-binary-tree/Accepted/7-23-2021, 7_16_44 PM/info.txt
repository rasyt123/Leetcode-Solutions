{"id":527311568,"lang":"cpp","time":"6 months, 3 weeks","timestamp":1627093004,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/527311568/","is_pending":"Not Pending","title":"Invert Binary Tree","memory":"9.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        if (root == nullptr) {\n            return root;\n        }\n        TreeNode* temp;\n        TreeNode* finaluru = root;\n        queue<TreeNode*> q1;\n        q1.push(root);\n        while (!q1.empty()) {\n            root = q1.front();\n            q1.pop();\n            temp = root->left;\n            root->left = root->right;\n            root->right = temp;\n            if (root->left != nullptr) {\n                q1.push(root->left);\n            }\n            if (root->right != nullptr) {\n                q1.push(root->right);\n            }\n        }\n        return finaluru;\n\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"invert-binary-tree"}