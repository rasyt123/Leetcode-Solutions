{"id":488005431,"lang":"cpp","time":"9 months, 2 weeks","timestamp":1619985220,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/488005431/","is_pending":"Not Pending","title":"Maximum Product Subarray","memory":"N/A","code":"#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <iterator>\n\n\n\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n     int a;\n     int t = nums.size();\n     int product = 1;\n     vector<int> max;\n     for (int i = 0; i < t; i++) {\n         if (i == t - 1) {\n           break;\n         } else {\n            for (int j = 0; j < t; j++) {\n              product = nums[i];\n              for (int k = i + 1; k < j + 2 && k < t; k++) {\n                  product = product * nums[k];\n              }\n              max.push_back(product);\n            }\n        }\n     }\n     if (max.size() > 0) {\n         a = *max_element(max.begin(), max.end());\n         return a;\n     } else {\n         return nums[0];\n     }\n    }\n};","compare_result":"1111111110110111011111111111111110111101101111101111111111111111011111110111111011011101111111111110111111111111111111110111111100111110011111111111111111111111111111111111111011111111110","title_slug":"maximum-product-subarray"}