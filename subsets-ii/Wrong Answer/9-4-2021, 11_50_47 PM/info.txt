{"id":549746100,"lang":"cpp","time":"5 months, 1 week","timestamp":1630824647,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/549746100/","is_pending":"Not Pending","title":"Subsets II","memory":"N/A","code":"class Solution {\npublic:\n    vector<vector<int>> subsetsWithDup(vector<int>& nums) {\n        /*\n        Turn this into an indexed based solution \n        I can choose whether to put an item into a subset or leave it out\n        I can use backtracking with depth first search. \n        \n        \n    \n        When including and excluding items at a particular index  to build a subset, we get two options. If we run these top options on \n        every single subset, then we will have tried all the combinations.\n        \n        Parameters \n        Base case:\n        f\n        if the index is out of range:\n            add the subset to the list of subsets\n        \n        push the item into the subset\n        recursion(add the index + 1, );\n        Exclude the item from the subset that we just added so we get a fresh combination.\n        recursion(add the current index + 1, );\n        return;\n        */\n        vector<int> subsetDup;\n        vector<vector<int>> dupesets;\n        dfs(0, subsetDup, nums, dupesets);\n        return dupesets;\n    }\n    \n    \n    void dfs(int currindex, vector<int> subsetDup, vector<int>& nums, vector<vector<int>>& dupesets) {\n        if (currindex == nums.size() and !subsetexists(subsetDup, dupesets)) {\n            dupesets.push_back(subsetDup);\n            return;\n        }\n        \n         if (currindex >= nums.size()) {\n            return;\n        }\n        subsetDup.push_back(nums[currindex]);\n        dfs(currindex + 1, subsetDup, nums, dupesets);\n        subsetDup.pop_back();\n        dfs(currindex + 1, subsetDup, nums, dupesets);\n        return;\n    }\n    \n    bool subsetexists(vector<int> subsetDup, vector<vector<int>>& dupesets) {\n        for (vector<int>& item : dupesets) {\n            if (item == subsetDup) {\n                return true;\n            }\n        }\n        return false;\n    }\n};","compare_result":"11111111111001111000","title_slug":"subsets-ii"}