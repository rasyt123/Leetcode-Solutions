{"id":547404337,"lang":"cpp","time":"5 months, 1 week","timestamp":1630437530,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/547404337/","is_pending":"Not Pending","title":"Permutation in String","memory":"8.8 MB","code":"class Solution {\npublic:\n    bool checkInclusion(string s1, string s2) {\n        /*\n        We can use a fixed sliding window approach. In each portion of the window, we can\n        create a copy of the window string and sort it and compare it to see if s1 is the same\n        as the copied string.\n\n        */\n        map<char, int> freq;\n        for (int i = 0; i < s1.size(); i++) {\n            if (freq.count(s1[i]) == 0) {\n                freq[s1[i]] = 1;\n            } else {\n                ++freq[s1[i]];\n            }\n\n        }\n        int windowstart = 0;\n        int k = s1.size();\n        map<char, int> freq2;\n        for (int windowend = 0; windowend < s2.size(); windowend++) {\n            if (freq2.count(s2[windowend]) == 0) {\n                freq2[s2[windowend]] = 1;\n            } else {\n                ++freq2[s2[windowend]];\n            }\n            if (windowend - windowstart + 1 == k) {\n                if (freq == freq2) {\n                    return true;\n                }\n                --freq2[s2[windowstart]];\n                if (freq2[s2[windowstart]] == 0) {\n                    freq2.erase(s2[windowstart]);\n                }\n                ++windowstart;\n            }\n        }\n        return false;\n    }\n};\n\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"permutation-in-string"}