{"id":588746925,"lang":"cpp","time":"2 months, 3 weeks","timestamp":1637182320,"status_display":"Accepted","runtime":"120 ms","url":"/submissions/detail/588746925/","is_pending":"Not Pending","title":"Find K Closest Elements","memory":"37.4 MB","code":"bool comparator(pair<int, int>& p1, pair<int, int>& p2) {\n        if (p1.first < p2.first) {\n            return true;\n        } else if (p1.first == p2.first) {\n            if (p1.second < p2.second) {\n                return true;\n            }  else {\n                return false;\n            }     \n        } else {\n            return false;\n        }\n    }\n\n\nclass Solution {\npublic:\n    vector<int> findClosestElements(vector<int>& arr, int k, int x) {\n        /*\n        \n        Today: \n        An integer a is clsoer to x if a - x == b - x and a < b \n        \n        \n        Custom sorter \n        \n        if pair1.first < pair2.second:\n            retutrn true;\n            if pair1.first == pair2.first:\n                if pair1.second < pair2.second:\n                    return true;\n                otherwise:\n                    return false\n            else \n                return false\n            \n             \n            \n        \n        {1:-2  2:-1 3:0 4: 1 5: 2}\n        {(0, 3), (1, 2), (1, 4), (2, 1), (2, 5)}\n        \n        \n        Make pairs of the a -x at every single element \n        sort the pairs\n        then iterate through the pairs and decrement k until its zero \n        and push the pairs into a priority queue\n                    \n        \n        */\n    \n        vector<int> newvec;\n        vector<pair<int, int>> closestpairs;\n        std::priority_queue<int, std::vector<int>, std::greater<int>> minheap;\n        for (int i = 0; i < arr.size(); i++) {\n            closestpairs.push_back({abs(arr[i] - x), arr[i]});\n        }\n        sort(closestpairs.begin(), closestpairs.end(), comparator);\n        \n        for (int i = 0; i < k; i++) {\n            cout << \"{\" << closestpairs[i].first << \", \" << closestpairs[i].second << \"}\" << endl;\n            newvec.push_back(closestpairs[i].second);\n        }\n        sort(newvec.begin(), newvec.end());\n        return newvec;\n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-k-closest-elements"}