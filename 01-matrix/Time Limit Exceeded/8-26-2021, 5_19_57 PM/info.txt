{"id":544832665,"lang":"python3","time":"5 months, 2 weeks","timestamp":1630023597,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/544832665/","is_pending":"Not Pending","title":"01 Matrix","memory":"N/A","code":"class Solution:\n    def updateMatrix(self, matrix: List[List[int]]) -> List[List[int]]:\n        # BFS helper #\n        def bfs(node):\n            from collections import deque\n            q = deque()\n            i, j = node\n            q.append(((i,j), 0)) # d (dist to a zero) = 0 initially \n            visited = set()\n            dirs = [(1,0), (-1,0), (0,1), (0,-1)]\n            while q:\n                for i in range(len(q)):\n                    coor, d = q.popleft()\n                    x, y = coor\n                    # if a zero nei is found\n                    if matrix[x][y] == 0:\n                        return d\n                    visited.add(coor)\n                    # investiagte neighbours\n                    for dir in dirs:\n                        newX, newY = x+dir[0], y+dir[1]\n                        # within bounds:\n                        if newX >= 0 and newX <= len(matrix)-1 and \\\n                            newY >= 0 and newY <= len(matrix[0])-1:\n                            # not seen:\n                            if (newX, newY) not in visited:\n                                q.append(((newX, newY), d+1))\n            return -1\n        \n        # main logic #\n\t\t\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == 1:\n                    d = bfs((i,j)) # d = closest dist to a 0\n                    matrix[i][j] = d # update M with d\n        return matrix\n        ","compare_result":"11111111111111111111111111111111111111111111111110","title_slug":"01-matrix"}