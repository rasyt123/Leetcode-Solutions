{"id":544262163,"lang":"cpp","time":"5 months, 2 weeks","timestamp":1629937498,"status_display":"Accepted","runtime":"125 ms","url":"/submissions/detail/544262163/","is_pending":"Not Pending","title":"Longest Consecutive Sequence","memory":"31.7 MB","code":"class Solution {\npublic:\n    int longestConsecutive(vector<int>& nums) {\n        /*\n        \n        consecutive sum should start with a 1. \n        \n        First observations:\n        We can use a set or a hashmap here.\n        consecutive element all have a difference of 1 with each other \n        \n        This question requires multiple passes\n        \n        We can pass through the array once and add all of the items to a set or a hashmap\n        The set will put all of the elements in order already\n        \n        We can pass through the array a second time and when we do, if the next item\n        is equal to 1 plus the current it is consecutive, so we can just update the counter.\n        if it isnt we can just reset the counter.\n        \n        The time complexity will be (O(N) + O(N))\n        which is still O(N)\n        \n        1 2 3 4 100 200  \n        \n        */\n        int length = 1;\n        int lenlength = 1;\n        map<int, int> elements;\n        if (nums.size() == 0) {\n            return 0;\n        }\n        for (int i = 0; i < nums.size(); i++) {\n            elements[nums[i]] = nums[i];\n        } \n        for (pair<int, int> item : elements) {\n            if (elements.find(item.first + 1) != elements.end() and item.first + 1 == elements[item.first + 1]) {\n              length += 1;\n              lenlength = max(lenlength, length);\n            } else {\n              length = 1;\n            }\n        }\n        \n        \n        return lenlength;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-consecutive-sequence"}