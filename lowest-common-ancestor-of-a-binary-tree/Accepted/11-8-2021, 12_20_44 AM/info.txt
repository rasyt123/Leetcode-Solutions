{"id":583881975,"lang":"cpp","time":"3Â months","timestamp":1636359644,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/583881975/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree","memory":"14.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        /*\n        \n        both nodes p and q appear in the subtrees of a particular node \n        or (left/right children)\n        \n        that means when we're at particular node, \n        we need to return true that we've found one node P in a subtree\n        and return true that we've found one node q in a subtree \n        \n        \n        two cases:\n                   when p is the node itself and q exists in a subtree of p\n                   when q is the node itself and p exists in a subtree of q \n        \n        We can solve this with post order traversal \n        We start from the bottom, returning true if the left or right subtrees have a p or q \n        Pass in reference for LCA \n        */\n        dfs(root, p, q);\n        return lca;\n     \n    }\n    \n    \n    bool dfs(TreeNode* root, TreeNode* p, TreeNode* q) {\n        if (root == nullptr) {\n            return false;\n        }\n        bool leftsub = dfs(root->left, p, q);\n        bool rightsub = dfs(root->right, p, q);\n        if ((p->val == root->val and leftsub) or (p->val == root->val and rightsub)) {\n            lca = root;\n            found = true;\n        } else if ((q->val == root->val and leftsub) or (q->val == root->val and rightsub)) {\n            lca = root;\n            found = true;\n        }\n        \n        if (p->val == root->val or q->val == root->val) {\n            return true;\n        }\n        \n        if (leftsub and rightsub and !found) {\n            lca = root;\n            found = true;\n        }\n        return leftsub or rightsub;\n\n    }\n    \n    \n    private:\n        TreeNode* lca;\n        bool found = false;\n};","compare_result":"1111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree"}