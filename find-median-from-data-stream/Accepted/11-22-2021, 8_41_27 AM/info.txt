{"id":591051902,"lang":"python3","time":"2 months, 2 weeks","timestamp":1637599287,"status_display":"Accepted","runtime":"832 ms","url":"/submissions/detail/591051902/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"36.5 MB","code":"from heapq import *\n\n\nclass MedianFinder:\n\n    def __init__(self):\n        self.max_heap = []  # containing first half of numbers\n        self.min_heap = []  # containing second half of numbers\n\n    def addNum(self, num: int) -> None:\n        #if the number we want to insert is less than the biggest from lower half\n        #insert the element into the max heap \n        if not self.max_heap or -self.max_heap[0] >= num:\n            heappush(self.max_heap, -num)\n        else:\n            #otherwise insert into the min heap\n            heappush(self.min_heap, num)\n\n            \n        #for balancing \n        # either both heaps will have equal number of elements or max-heap will have one more element\n        if len(self.max_heap) > len(self.min_heap) + 1:\n            #if there's more than a 1 diff between min heap and max_heap,\n            #balance by popping the \n            heappush(self.min_heap, -heappop(self.max_heap))\n        elif len(self.max_heap) < len(self.min_heap):\n            heappush(self.max_heap, -heappop(self.min_heap))\n\n    def findMedian(self) -> float:\n        # we have even number of elements, take the average of middle two elements\n        if len(self.max_heap) == len(self.min_heap):\n            return -self.max_heap[0] / 2.0 + self.min_heap[0] / 2.0\n        # we have odd number of elements, the first element in max-heap is the median element\n        return -float(self.max_heap[0])\n\n# Your MedianFinder object will be instantiated and called as such:\n# obj = MedianFinder()\n# obj.addNum(num)\n# param_2 = obj.findMedian()","compare_result":"111111111111111111111","title_slug":"find-median-from-data-stream"}