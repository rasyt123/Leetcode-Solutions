{"id":552960013,"lang":"cpp","time":"5Â months","timestamp":1631342628,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/552960013/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"N/A","code":"class MedianFinder {\npublic:\n    /** initialize your data structure here. */\n\n    /*\n    Use minheap to add the numbers\n    we need to keep track of the size of the minheap\n    if the size is odd, then we do n / 2\n\n    we keep popping until n / 2\n\n    1 2 3 4 5 6\n    0 1 2 3 4 5\n    n/2, n/2 + 1\n    */\n    int currsize;\n    priority_queue<double, vector<double>, greater<double>> pq;\n    stack<double> items;\n    MedianFinder() {\n        int currsize;\n        priority_queue<double, vector<double>, greater<double>> pq;\n        stack<double> items;\n    }\n\n    void addNum(int num) {\n        pq.push(num);\n        currsize = pq.size();\n    }\n\n    double findMedian() {\n        if (currsize % 2 != 0) {\n            int upto = currsize / 2;\n            //1 2 3\n            int start = 0;\n            while (start < upto) {\n                int result = pq.top();\n                pq.pop();\n                items.push(result);\n                ++start;\n            }\n            double median = pq.top();\n            while (!items.empty()) {\n                int topitem = items.top();\n                pq.push(topitem);\n                items.pop();\n            }\n            return median;\n        } else {\n            int upto = currsize / 2;\n            int start = 0;\n            while (start < upto) {\n                int result = pq.top();\n                pq.pop();\n                items.push(result);\n                ++start;\n            }\n            double midval1 = items.top();\n            double midval2 = pq.top();\n            double median = (midval1 + midval2) / 2;\n            while (!items.empty()) {\n                int topitem = items.top();\n                pq.push(topitem);\n                items.pop();\n            }\n            return median;\n        }\n\n\n    }\n};\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder* obj = new MedianFinder();\n * obj->addNum(num);\n * double param_2 = obj->findMedian();\n */","compare_result":"111111111111111000000","title_slug":"find-median-from-data-stream"}