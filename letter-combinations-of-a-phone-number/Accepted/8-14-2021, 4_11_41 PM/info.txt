{"id":538580985,"lang":"cpp","time":"6Â months","timestamp":1628982701,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/538580985/","is_pending":"Not Pending","title":"Letter Combinations of a Phone Number","memory":"6.8 MB","code":"class Solution {\npublic:\n    vector<string> letterCombinations(string digits) {\n        map<char, string> phonenums{{'2', \"cba\"}, {'3', \"fed\"}, {'4', \"ihg\"}, {'5', \"lkj\"}, {'6', \"onm\"}, {'7', \"srqp\"}, {'8', \"vut\"}, {'9', \"zyxw\"}};\n        vector<string> combos;\n\n        recursivehelper(0, 0, digits, phonenums, combos, digits);\n        sort(combos.begin(), combos.end());\n        return combos;\n    }\n\n    bool is_alpha(const std::string &str)\n    {\n        return std::all_of(str.begin(), str.end(), ::isalpha); // C++11\n    }\n\n    void recursivehelper(int index, int numindex, string digits, map<char, string>& phonenums, vector<string>& combos, string& digits2) {\n        if (index >= digits.size() or numindex >= phonenums[digits2[index]].size()) {\n            return;\n        }\n        digits[index] = phonenums[digits2[index]][numindex];\n        if (is_alpha(digits)) {\n            combos.push_back(digits);\n        }\n        recursivehelper(index, numindex + 1, digits, phonenums, combos, digits2);\n        numindex = 0;\n        recursivehelper(index + 1, numindex, digits, phonenums, combos, digits2);\n\n    }\n};","compare_result":"1111111111111111111111111","title_slug":"letter-combinations-of-a-phone-number"}