{"id":513310378,"lang":"cpp","time":"7Â months, 2Â weeks","timestamp":1624690552,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/513310378/","is_pending":"Not Pending","title":"Add Two Numbers","memory":"71 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        int l1size = 0;\n        int l2size = 0;\n        int sizedif;\n        int carryover;\n        int temp;\n        ListNode* zimp = l1;\n        ListNode* headl1 = l1;\n        ListNode* headl2 = l2;\n        ListNode* Tail;\n        ListNode* temporary;\n        while (headl1 != nullptr) {\n            ++l1size;\n            headl1 = headl1->next;\n\n        }\n\n        while (headl2 != nullptr) {\n            ++l2size;\n            headl2 = headl2->next;\n        }\n\n        headl1 = l1;\n        headl2 = l2;\n\n        if (l1size > l2size) {\n            sizedif = l1size - l2size;\n            while (headl2 != nullptr) {\n                if (headl2->next == nullptr) {\n                    Tail = headl2;\n                }\n                headl2 = headl2->next;\n            }\n            while (sizedif--) {\n                ListNode* temporary = new ListNode;\n                temporary->val = 0;\n                Tail->next = temporary;\n                temporary->next = nullptr;\n                Tail = temporary;\n            }\n        } else if (l2size > l1size) {\n            sizedif = l2size - l1size;\n            while (headl1 != nullptr) {\n                if (headl1->next == nullptr) {\n                    Tail = headl1;\n                }\n                headl1 = headl1->next;\n            }\n            while (sizedif--) {\n                ListNode* temporary = new ListNode;\n                temporary->val = 0;\n                Tail->next = temporary;\n                temporary->next = nullptr;\n                Tail = temporary;\n            }\n        }\n\n        while (l1 != nullptr and l2 != nullptr) {\n            l1->val = l1->val + l2->val;\n            if (l1->val >= 10 && l1->next == nullptr) {\n                l1->val = l1->val % 10;\n                ListNode* temporary = new ListNode;\n                temporary->val = 0;\n                l1->next = temporary;\n                temporary->next = nullptr;\n                l1 = temporary;\n                temp = l1->val;\n                l1->val = 1;\n            }\n            else if (l1->val >= 10) {\n                temp = l1->val;\n                l1->val = l1->val % 10;\n                temp = temp / 10;\n                l1->next->val = l1->next->val + temp;\n            }\n            l1 = l1->next;\n            l2 = l2->next;\n        }\n        return zimp;\n\n    }\n};","compare_resulttitle_slug":"add-two-numbers"}